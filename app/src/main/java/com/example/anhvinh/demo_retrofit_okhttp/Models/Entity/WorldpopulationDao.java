package com.example.anhvinh.demo_retrofit_okhttp.Models.Entity;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WORLDPOPULATION".
*/
public class WorldpopulationDao extends AbstractDao<Worldpopulation, Long> {

    public static final String TABLENAME = "WORLDPOPULATION";

    /**
     * Properties of entity Worldpopulation.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Rank = new Property(0, Long.class, "rank", true, "_id");
        public final static Property Country = new Property(1, String.class, "country", false, "COUNTRY");
        public final static Property Population = new Property(2, String.class, "population", false, "POPULATION");
        public final static Property Flag = new Property(3, String.class, "flag", false, "FLAG");
    }


    public WorldpopulationDao(DaoConfig config) {
        super(config);
    }
    
    public WorldpopulationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WORLDPOPULATION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: rank
                "\"COUNTRY\" TEXT," + // 1: country
                "\"POPULATION\" TEXT," + // 2: population
                "\"FLAG\" TEXT);"); // 3: flag
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WORLDPOPULATION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Worldpopulation entity) {
        stmt.clearBindings();
 
        Long rank = entity.getRank();
        if (rank != null) {
            stmt.bindLong(1, rank);
        }
 
        String country = entity.getCountry();
        if (country != null) {
            stmt.bindString(2, country);
        }
 
        String population = entity.getPopulation();
        if (population != null) {
            stmt.bindString(3, population);
        }
 
        String flag = entity.getFlag();
        if (flag != null) {
            stmt.bindString(4, flag);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Worldpopulation entity) {
        stmt.clearBindings();
 
        Long rank = entity.getRank();
        if (rank != null) {
            stmt.bindLong(1, rank);
        }
 
        String country = entity.getCountry();
        if (country != null) {
            stmt.bindString(2, country);
        }
 
        String population = entity.getPopulation();
        if (population != null) {
            stmt.bindString(3, population);
        }
 
        String flag = entity.getFlag();
        if (flag != null) {
            stmt.bindString(4, flag);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Worldpopulation readEntity(Cursor cursor, int offset) {
        Worldpopulation entity = new Worldpopulation( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // rank
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // country
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // population
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // flag
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Worldpopulation entity, int offset) {
        entity.setRank(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCountry(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPopulation(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFlag(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Worldpopulation entity, long rowId) {
        entity.setRank(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Worldpopulation entity) {
        if(entity != null) {
            return entity.getRank();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Worldpopulation entity) {
        return entity.getRank() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

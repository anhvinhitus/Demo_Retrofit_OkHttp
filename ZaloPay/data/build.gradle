buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'me.tatarka:gradle-retrolambda:3.2.3'
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
    }
}

apply plugin: 'com.android.library'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'me.tatarka.retrolambda'

def cfg = rootProject.ext.configuration

android {
    compileSdkVersion cfg.compileVersion
    buildToolsVersion cfg.buildToolsVersion

    defaultConfig {
        minSdkVersion cfg.minSdk
        targetSdkVersion cfg.targetSdk
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude "META-INF/io.netty.versions.properties"
    }

    lintOptions {
        quiet true
        abortOnError false
        ignoreWarnings true
        disable 'InvalidPackage'
        disable 'OldTargetApi'
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    def libs = rootProject.ext.libraries
    def tests = rootProject.ext.testingLibraries

    testCompile tests.junit
    testCompile tests.robolectric

    compile libs.support_appcompat_v7
    compile libs.support_annotations
    compile libs.dagger
    apt libs.daggerCompiler
    provided libs.javaxAnnotation

    compile libs.rxJava
    compile libs.rxAndroid

    compile libs.retrofit
    compile libs.retrofitAdapter
    compile libs.retrofitConverter
    compile libs.retrofitLogging
    compile libs.okHttp
    compile libs.greenDao
    compile libs.timber
    compile libs.eventbus
    compile libs.gson
    compile libs.cbor

    compile project(':domain')

    // compile 'io.netty:netty-all:4.1.0.CR4'
//    compile libs.netty_codec
//    compile libs.netty_transport
    compile libs.protobuf
}
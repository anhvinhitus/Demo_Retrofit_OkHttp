package vn.com.vng.zalopay.data.cache.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MERCHANT_USER".
*/
public class MerchantUserDao extends AbstractDao<MerchantUser, Long> {

    public static final String TABLENAME = "MERCHANT_USER";

    /**
     * Properties of entity MerchantUser.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Appid = new Property(0, long.class, "appid", true, "APPID");
        public final static Property MUid = new Property(1, String.class, "mUid", false, "M_UID");
        public final static Property MAccessToken = new Property(2, String.class, "mAccessToken", false, "M_ACCESS_TOKEN");
        public final static Property DisplayName = new Property(3, String.class, "displayName", false, "DISPLAY_NAME");
        public final static Property Avatar = new Property(4, String.class, "avatar", false, "AVATAR");
        public final static Property Birthday = new Property(5, String.class, "birthday", false, "BIRTHDAY");
        public final static Property Gender = new Property(6, Long.class, "gender", false, "GENDER");
    }


    public MerchantUserDao(DaoConfig config) {
        super(config);
    }
    
    public MerchantUserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MERCHANT_USER\" (" + //
                "\"APPID\" INTEGER PRIMARY KEY NOT NULL ," + // 0: appid
                "\"M_UID\" TEXT," + // 1: mUid
                "\"M_ACCESS_TOKEN\" TEXT," + // 2: mAccessToken
                "\"DISPLAY_NAME\" TEXT," + // 3: displayName
                "\"AVATAR\" TEXT," + // 4: avatar
                "\"BIRTHDAY\" TEXT," + // 5: birthday
                "\"GENDER\" INTEGER);"); // 6: gender
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MERCHANT_USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MerchantUser entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.appid);
 
        String mUid = entity.mUid;
        if (mUid != null) {
            stmt.bindString(2, mUid);
        }
 
        String mAccessToken = entity.mAccessToken;
        if (mAccessToken != null) {
            stmt.bindString(3, mAccessToken);
        }
 
        String displayName = entity.displayName;
        if (displayName != null) {
            stmt.bindString(4, displayName);
        }
 
        String avatar = entity.avatar;
        if (avatar != null) {
            stmt.bindString(5, avatar);
        }
 
        String birthday = entity.birthday;
        if (birthday != null) {
            stmt.bindString(6, birthday);
        }
 
        Long gender = entity.gender;
        if (gender != null) {
            stmt.bindLong(7, gender);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MerchantUser entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.appid);
 
        String mUid = entity.mUid;
        if (mUid != null) {
            stmt.bindString(2, mUid);
        }
 
        String mAccessToken = entity.mAccessToken;
        if (mAccessToken != null) {
            stmt.bindString(3, mAccessToken);
        }
 
        String displayName = entity.displayName;
        if (displayName != null) {
            stmt.bindString(4, displayName);
        }
 
        String avatar = entity.avatar;
        if (avatar != null) {
            stmt.bindString(5, avatar);
        }
 
        String birthday = entity.birthday;
        if (birthday != null) {
            stmt.bindString(6, birthday);
        }
 
        Long gender = entity.gender;
        if (gender != null) {
            stmt.bindLong(7, gender);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public MerchantUser readEntity(Cursor cursor, int offset) {
        MerchantUser entity = new MerchantUser();
        readEntity(cursor, entity, offset);
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MerchantUser entity, int offset) {
        entity.appid = cursor.getLong(offset + 0);
        entity.mUid = cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1);
        entity.mAccessToken = cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2);
        entity.displayName = cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3);
        entity.avatar = cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4);
        entity.birthday = cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5);
        entity.gender = cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MerchantUser entity, long rowId) {
        entity.appid = rowId;
        return rowId;
    }
    
    @Override
    public Long getKey(MerchantUser entity) {
        if(entity != null) {
            return entity.appid;
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MerchantUser entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

package vn.com.vng.zalopay.data.cache.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import vn.com.vng.zalopay.data.cache.model.AppInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "APP_INFO".
*/
public class AppInfoDao extends AbstractDao<AppInfo, String> {

    public static final String TABLENAME = "APP_INFO";

    /**
     * Properties of entity AppInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property App_id = new Property(0, String.class, "app_id", true, "APP_ID");
        public final static Property App_name = new Property(1, String.class, "app_name", false, "APP_NAME");
        public final static Property App_icon_url = new Property(2, String.class, "app_icon_url", false, "APP_ICON_URL");
        public final static Property Js_url = new Property(3, String.class, "js_url", false, "JS_URL");
        public final static Property Resource_url = new Property(4, String.class, "resource_url", false, "RESOURCE_URL");
        public final static Property Base_url = new Property(5, String.class, "base_url", false, "BASE_URL");
        public final static Property App_checksum = new Property(6, String.class, "app_checksum", false, "APP_CHECKSUM");
        public final static Property Status = new Property(7, Integer.class, "status", false, "STATUS");
        public final static Property App_local_url = new Property(8, String.class, "app_local_url", false, "APP_LOCAL_URL");
    };


    public AppInfoDao(DaoConfig config) {
        super(config);
    }
    
    public AppInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"APP_INFO\" (" + //
                "\"APP_ID\" TEXT PRIMARY KEY NOT NULL UNIQUE ," + // 0: app_id
                "\"APP_NAME\" TEXT," + // 1: app_name
                "\"APP_ICON_URL\" TEXT," + // 2: app_icon_url
                "\"JS_URL\" TEXT," + // 3: js_url
                "\"RESOURCE_URL\" TEXT," + // 4: resource_url
                "\"BASE_URL\" TEXT," + // 5: base_url
                "\"APP_CHECKSUM\" TEXT," + // 6: app_checksum
                "\"STATUS\" INTEGER," + // 7: status
                "\"APP_LOCAL_URL\" TEXT);"); // 8: app_local_url
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"APP_INFO\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AppInfo entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getApp_id());
 
        String app_name = entity.getApp_name();
        if (app_name != null) {
            stmt.bindString(2, app_name);
        }
 
        String app_icon_url = entity.getApp_icon_url();
        if (app_icon_url != null) {
            stmt.bindString(3, app_icon_url);
        }
 
        String js_url = entity.getJs_url();
        if (js_url != null) {
            stmt.bindString(4, js_url);
        }
 
        String resource_url = entity.getResource_url();
        if (resource_url != null) {
            stmt.bindString(5, resource_url);
        }
 
        String base_url = entity.getBase_url();
        if (base_url != null) {
            stmt.bindString(6, base_url);
        }
 
        String app_checksum = entity.getApp_checksum();
        if (app_checksum != null) {
            stmt.bindString(7, app_checksum);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(8, status);
        }
 
        String app_local_url = entity.getApp_local_url();
        if (app_local_url != null) {
            stmt.bindString(9, app_local_url);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public AppInfo readEntity(Cursor cursor, int offset) {
        AppInfo entity = new AppInfo( //
            cursor.getString(offset + 0), // app_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // app_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // app_icon_url
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // js_url
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // resource_url
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // base_url
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // app_checksum
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // status
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // app_local_url
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AppInfo entity, int offset) {
        entity.setApp_id(cursor.getString(offset + 0));
        entity.setApp_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setApp_icon_url(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setJs_url(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setResource_url(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBase_url(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setApp_checksum(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setStatus(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setApp_local_url(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(AppInfo entity, long rowId) {
        return entity.getApp_id();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(AppInfo entity) {
        if(entity != null) {
            return entity.getApp_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

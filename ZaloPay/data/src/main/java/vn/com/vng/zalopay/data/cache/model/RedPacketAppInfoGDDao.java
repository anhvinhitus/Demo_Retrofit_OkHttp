package vn.com.vng.zalopay.data.cache.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RED_PACKET_APP_INFO_GD".
*/
public class RedPacketAppInfoGDDao extends AbstractDao<RedPacketAppInfoGD, Long> {

    public static final String TABLENAME = "RED_PACKET_APP_INFO_GD";

    /**
     * Properties of entity RedPacketAppInfoGD.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Checksum = new Property(1, String.class, "checksum", false, "CHECKSUM");
        public final static Property ExpiredTime = new Property(2, Long.class, "expiredTime", false, "EXPIRED_TIME");
        public final static Property MinAmountEach = new Property(3, Long.class, "minAmountEach", false, "MIN_AMOUNT_EACH");
        public final static Property MaxTotalAmountPerBundle = new Property(4, Long.class, "maxTotalAmountPerBundle", false, "MAX_TOTAL_AMOUNT_PER_BUNDLE");
        public final static Property MaxPackageQuantity = new Property(5, Integer.class, "maxPackageQuantity", false, "MAX_PACKAGE_QUANTITY");
        public final static Property MaxCountHist = new Property(6, Integer.class, "maxCountHist", false, "MAX_COUNT_HIST");
        public final static Property MaxMessageLength = new Property(7, Integer.class, "maxMessageLength", false, "MAX_MESSAGE_LENGTH");
        public final static Property BundleExpiredTime = new Property(8, Long.class, "bundleExpiredTime", false, "BUNDLE_EXPIRED_TIME");
        public final static Property MinDivideAmount = new Property(9, Long.class, "minDivideAmount", false, "MIN_DIVIDE_AMOUNT");
        public final static Property MaxAmountPerPackage = new Property(10, Long.class, "maxAmountPerPackage", false, "MAX_AMOUNT_PER_PACKAGE");
    }


    public RedPacketAppInfoGDDao(DaoConfig config) {
        super(config);
    }
    
    public RedPacketAppInfoGDDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RED_PACKET_APP_INFO_GD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CHECKSUM\" TEXT," + // 1: checksum
                "\"EXPIRED_TIME\" INTEGER," + // 2: expiredTime
                "\"MIN_AMOUNT_EACH\" INTEGER," + // 3: minAmountEach
                "\"MAX_TOTAL_AMOUNT_PER_BUNDLE\" INTEGER," + // 4: maxTotalAmountPerBundle
                "\"MAX_PACKAGE_QUANTITY\" INTEGER," + // 5: maxPackageQuantity
                "\"MAX_COUNT_HIST\" INTEGER," + // 6: maxCountHist
                "\"MAX_MESSAGE_LENGTH\" INTEGER," + // 7: maxMessageLength
                "\"BUNDLE_EXPIRED_TIME\" INTEGER," + // 8: bundleExpiredTime
                "\"MIN_DIVIDE_AMOUNT\" INTEGER," + // 9: minDivideAmount
                "\"MAX_AMOUNT_PER_PACKAGE\" INTEGER);"); // 10: maxAmountPerPackage
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RED_PACKET_APP_INFO_GD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RedPacketAppInfoGD entity) {
        stmt.clearBindings();
 
        Long id = entity.id;
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String checksum = entity.checksum;
        if (checksum != null) {
            stmt.bindString(2, checksum);
        }
 
        Long expiredTime = entity.expiredTime;
        if (expiredTime != null) {
            stmt.bindLong(3, expiredTime);
        }
 
        Long minAmountEach = entity.minAmountEach;
        if (minAmountEach != null) {
            stmt.bindLong(4, minAmountEach);
        }
 
        Long maxTotalAmountPerBundle = entity.maxTotalAmountPerBundle;
        if (maxTotalAmountPerBundle != null) {
            stmt.bindLong(5, maxTotalAmountPerBundle);
        }
 
        Integer maxPackageQuantity = entity.maxPackageQuantity;
        if (maxPackageQuantity != null) {
            stmt.bindLong(6, maxPackageQuantity);
        }
 
        Integer maxCountHist = entity.maxCountHist;
        if (maxCountHist != null) {
            stmt.bindLong(7, maxCountHist);
        }
 
        Integer maxMessageLength = entity.maxMessageLength;
        if (maxMessageLength != null) {
            stmt.bindLong(8, maxMessageLength);
        }
 
        Long bundleExpiredTime = entity.bundleExpiredTime;
        if (bundleExpiredTime != null) {
            stmt.bindLong(9, bundleExpiredTime);
        }
 
        Long minDivideAmount = entity.minDivideAmount;
        if (minDivideAmount != null) {
            stmt.bindLong(10, minDivideAmount);
        }
 
        Long maxAmountPerPackage = entity.maxAmountPerPackage;
        if (maxAmountPerPackage != null) {
            stmt.bindLong(11, maxAmountPerPackage);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RedPacketAppInfoGD entity) {
        stmt.clearBindings();
 
        Long id = entity.id;
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String checksum = entity.checksum;
        if (checksum != null) {
            stmt.bindString(2, checksum);
        }
 
        Long expiredTime = entity.expiredTime;
        if (expiredTime != null) {
            stmt.bindLong(3, expiredTime);
        }
 
        Long minAmountEach = entity.minAmountEach;
        if (minAmountEach != null) {
            stmt.bindLong(4, minAmountEach);
        }
 
        Long maxTotalAmountPerBundle = entity.maxTotalAmountPerBundle;
        if (maxTotalAmountPerBundle != null) {
            stmt.bindLong(5, maxTotalAmountPerBundle);
        }
 
        Integer maxPackageQuantity = entity.maxPackageQuantity;
        if (maxPackageQuantity != null) {
            stmt.bindLong(6, maxPackageQuantity);
        }
 
        Integer maxCountHist = entity.maxCountHist;
        if (maxCountHist != null) {
            stmt.bindLong(7, maxCountHist);
        }
 
        Integer maxMessageLength = entity.maxMessageLength;
        if (maxMessageLength != null) {
            stmt.bindLong(8, maxMessageLength);
        }
 
        Long bundleExpiredTime = entity.bundleExpiredTime;
        if (bundleExpiredTime != null) {
            stmt.bindLong(9, bundleExpiredTime);
        }
 
        Long minDivideAmount = entity.minDivideAmount;
        if (minDivideAmount != null) {
            stmt.bindLong(10, minDivideAmount);
        }
 
        Long maxAmountPerPackage = entity.maxAmountPerPackage;
        if (maxAmountPerPackage != null) {
            stmt.bindLong(11, maxAmountPerPackage);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public RedPacketAppInfoGD readEntity(Cursor cursor, int offset) {
        RedPacketAppInfoGD entity = new RedPacketAppInfoGD();
        readEntity(cursor, entity, offset);
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RedPacketAppInfoGD entity, int offset) {
        entity.id = cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
        entity.checksum = cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1);
        entity.expiredTime = cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2);
        entity.minAmountEach = cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3);
        entity.maxTotalAmountPerBundle = cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4);
        entity.maxPackageQuantity = cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5);
        entity.maxCountHist = cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6);
        entity.maxMessageLength = cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7);
        entity.bundleExpiredTime = cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8);
        entity.minDivideAmount = cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9);
        entity.maxAmountPerPackage = cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(RedPacketAppInfoGD entity, long rowId) {
        entity.id = rowId;
        return rowId;
    }
    
    @Override
    public Long getKey(RedPacketAppInfoGD entity) {
        if(entity != null) {
            return entity.id;
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RedPacketAppInfoGD entity) {
        return entity.id != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

package vn.com.vng.zalopay.data.cache.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import vn.com.vng.zalopay.data.cache.model.TransferRecent;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TRANSFER_RECENT".
*/
public class TransferRecentDao extends AbstractDao<TransferRecent, Void> {

    public static final String TABLENAME = "TRANSFER_RECENT";

    /**
     * Properties of entity TransferRecent.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property UserId = new Property(0, long.class, "userId", false, "USER_ID");
        public final static Property UserName = new Property(1, String.class, "userName", false, "USER_NAME");
        public final static Property DisplayName = new Property(2, Integer.class, "displayName", false, "DISPLAY_NAME");
        public final static Property Avatar = new Property(3, String.class, "avatar", false, "AVATAR");
        public final static Property UserGender = new Property(4, String.class, "userGender", false, "USER_GENDER");
        public final static Property Birthday = new Property(5, Integer.class, "birthday", false, "BIRTHDAY");
        public final static Property UsingApp = new Property(6, String.class, "usingApp", false, "USING_APP");
        public final static Property PhoneNumber = new Property(7, String.class, "phoneNumber", false, "PHONE_NUMBER");
        public final static Property TransferType = new Property(8, Integer.class, "transferType", false, "TRANSFER_TYPE");
    };


    public TransferRecentDao(DaoConfig config) {
        super(config);
    }
    
    public TransferRecentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TRANSFER_RECENT\" (" + //
                "\"USER_ID\" INTEGER NOT NULL UNIQUE ," + // 0: userId
                "\"USER_NAME\" TEXT," + // 1: userName
                "\"DISPLAY_NAME\" INTEGER," + // 2: displayName
                "\"AVATAR\" TEXT," + // 3: avatar
                "\"USER_GENDER\" TEXT," + // 4: userGender
                "\"BIRTHDAY\" INTEGER," + // 5: birthday
                "\"USING_APP\" TEXT," + // 6: usingApp
                "\"PHONE_NUMBER\" TEXT," + // 7: phoneNumber
                "\"TRANSFER_TYPE\" INTEGER);"); // 8: transferType
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TRANSFER_RECENT\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TransferRecent entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getUserId());
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
 
        Integer displayName = entity.getDisplayName();
        if (displayName != null) {
            stmt.bindLong(3, displayName);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(4, avatar);
        }
 
        String userGender = entity.getUserGender();
        if (userGender != null) {
            stmt.bindString(5, userGender);
        }
 
        Integer birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindLong(6, birthday);
        }
 
        String usingApp = entity.getUsingApp();
        if (usingApp != null) {
            stmt.bindString(7, usingApp);
        }
 
        String phoneNumber = entity.getPhoneNumber();
        if (phoneNumber != null) {
            stmt.bindString(8, phoneNumber);
        }
 
        Integer transferType = entity.getTransferType();
        if (transferType != null) {
            stmt.bindLong(9, transferType);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public TransferRecent readEntity(Cursor cursor, int offset) {
        TransferRecent entity = new TransferRecent( //
            cursor.getLong(offset + 0), // userId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userName
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // displayName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // avatar
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // userGender
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // birthday
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // usingApp
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // phoneNumber
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8) // transferType
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TransferRecent entity, int offset) {
        entity.setUserId(cursor.getLong(offset + 0));
        entity.setUserName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDisplayName(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setAvatar(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUserGender(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBirthday(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setUsingApp(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPhoneNumber(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTransferType(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(TransferRecent entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(TransferRecent entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

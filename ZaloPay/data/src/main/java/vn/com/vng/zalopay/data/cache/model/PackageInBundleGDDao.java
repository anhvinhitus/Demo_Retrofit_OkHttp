package vn.com.vng.zalopay.data.cache.model;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PACKAGE_IN_BUNDLE_GD".
*/
public class PackageInBundleGDDao extends AbstractDao<PackageInBundleGD, Long> {

    public static final String TABLENAME = "PACKAGE_IN_BUNDLE_GD";

    /**
     * Properties of entity PackageInBundleGD.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property BundleID = new Property(1, Long.class, "bundleID", false, "BUNDLE_ID");
        public final static Property RevZaloPayID = new Property(2, String.class, "revZaloPayID", false, "REV_ZALO_PAY_ID");
        public final static Property RevZaloID = new Property(3, Long.class, "revZaloID", false, "REV_ZALO_ID");
        public final static Property RevFullName = new Property(4, String.class, "revFullName", false, "REV_FULL_NAME");
        public final static Property RevAvatarURL = new Property(5, String.class, "revAvatarURL", false, "REV_AVATAR_URL");
        public final static Property OpenTime = new Property(6, Long.class, "openTime", false, "OPEN_TIME");
        public final static Property Amount = new Property(7, Long.class, "amount", false, "AMOUNT");
        public final static Property SendMessage = new Property(8, String.class, "sendMessage", false, "SEND_MESSAGE");
        public final static Property IsLuckiest = new Property(9, Integer.class, "isLuckiest", false, "IS_LUCKIEST");
    }

    private Query<PackageInBundleGD> sentBundleGD_SentPackagesQuery;
    private Query<PackageInBundleGD> receivePackageGD_ReceivePackagesQuery;

    public PackageInBundleGDDao(DaoConfig config) {
        super(config);
    }
    
    public PackageInBundleGDDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PACKAGE_IN_BUNDLE_GD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"BUNDLE_ID\" INTEGER," + // 1: bundleID
                "\"REV_ZALO_PAY_ID\" TEXT," + // 2: revZaloPayID
                "\"REV_ZALO_ID\" INTEGER," + // 3: revZaloID
                "\"REV_FULL_NAME\" TEXT," + // 4: revFullName
                "\"REV_AVATAR_URL\" TEXT," + // 5: revAvatarURL
                "\"OPEN_TIME\" INTEGER," + // 6: openTime
                "\"AMOUNT\" INTEGER," + // 7: amount
                "\"SEND_MESSAGE\" TEXT," + // 8: sendMessage
                "\"IS_LUCKIEST\" INTEGER);"); // 9: isLuckiest
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PACKAGE_IN_BUNDLE_GD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PackageInBundleGD entity) {
        stmt.clearBindings();
 
        Long id = entity.id;
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long bundleID = entity.bundleID;
        if (bundleID != null) {
            stmt.bindLong(2, bundleID);
        }
 
        String revZaloPayID = entity.revZaloPayID;
        if (revZaloPayID != null) {
            stmt.bindString(3, revZaloPayID);
        }
 
        Long revZaloID = entity.revZaloID;
        if (revZaloID != null) {
            stmt.bindLong(4, revZaloID);
        }
 
        String revFullName = entity.revFullName;
        if (revFullName != null) {
            stmt.bindString(5, revFullName);
        }
 
        String revAvatarURL = entity.revAvatarURL;
        if (revAvatarURL != null) {
            stmt.bindString(6, revAvatarURL);
        }
 
        Long openTime = entity.openTime;
        if (openTime != null) {
            stmt.bindLong(7, openTime);
        }
 
        Long amount = entity.amount;
        if (amount != null) {
            stmt.bindLong(8, amount);
        }
 
        String sendMessage = entity.sendMessage;
        if (sendMessage != null) {
            stmt.bindString(9, sendMessage);
        }
 
        Integer isLuckiest = entity.isLuckiest;
        if (isLuckiest != null) {
            stmt.bindLong(10, isLuckiest);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PackageInBundleGD entity) {
        stmt.clearBindings();
 
        Long id = entity.id;
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long bundleID = entity.bundleID;
        if (bundleID != null) {
            stmt.bindLong(2, bundleID);
        }
 
        String revZaloPayID = entity.revZaloPayID;
        if (revZaloPayID != null) {
            stmt.bindString(3, revZaloPayID);
        }
 
        Long revZaloID = entity.revZaloID;
        if (revZaloID != null) {
            stmt.bindLong(4, revZaloID);
        }
 
        String revFullName = entity.revFullName;
        if (revFullName != null) {
            stmt.bindString(5, revFullName);
        }
 
        String revAvatarURL = entity.revAvatarURL;
        if (revAvatarURL != null) {
            stmt.bindString(6, revAvatarURL);
        }
 
        Long openTime = entity.openTime;
        if (openTime != null) {
            stmt.bindLong(7, openTime);
        }
 
        Long amount = entity.amount;
        if (amount != null) {
            stmt.bindLong(8, amount);
        }
 
        String sendMessage = entity.sendMessage;
        if (sendMessage != null) {
            stmt.bindString(9, sendMessage);
        }
 
        Integer isLuckiest = entity.isLuckiest;
        if (isLuckiest != null) {
            stmt.bindLong(10, isLuckiest);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PackageInBundleGD readEntity(Cursor cursor, int offset) {
        PackageInBundleGD entity = new PackageInBundleGD( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // bundleID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // revZaloPayID
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // revZaloID
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // revFullName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // revAvatarURL
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // openTime
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // amount
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // sendMessage
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9) // isLuckiest
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PackageInBundleGD entity, int offset) {
        entity.id = cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
        entity.bundleID = cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1);
        entity.revZaloPayID = cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2);
        entity.revZaloID = cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3);
        entity.revFullName = cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4);
        entity.revAvatarURL = cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5);
        entity.openTime = cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6);
        entity.amount = cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7);
        entity.sendMessage = cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8);
        entity.isLuckiest = cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PackageInBundleGD entity, long rowId) {
        entity.id = rowId;
        return rowId;
    }
    
    @Override
    public Long getKey(PackageInBundleGD entity) {
        if(entity != null) {
            return entity.id;
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PackageInBundleGD entity) {
        return entity.id != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "sentPackages" to-many relationship of SentBundleGD. */
    public List<PackageInBundleGD> _querySentBundleGD_SentPackages(Long bundleID) {
        synchronized (this) {
            if (sentBundleGD_SentPackagesQuery == null) {
                QueryBuilder<PackageInBundleGD> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.BundleID.eq(null));
                queryBuilder.orderRaw("T.'OPEN_TIME' DESC");
                sentBundleGD_SentPackagesQuery = queryBuilder.build();
            }
        }
        Query<PackageInBundleGD> query = sentBundleGD_SentPackagesQuery.forCurrentThread();
        query.setParameter(0, bundleID);
        return query.list();
    }

    /** Internal query to resolve the "receivePackages" to-many relationship of ReceivePackageGD. */
    public List<PackageInBundleGD> _queryReceivePackageGD_ReceivePackages(Long bundleID) {
        synchronized (this) {
            if (receivePackageGD_ReceivePackagesQuery == null) {
                QueryBuilder<PackageInBundleGD> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.BundleID.eq(null));
                queryBuilder.orderRaw("T.'OPEN_TIME' DESC");
                receivePackageGD_ReceivePackagesQuery = queryBuilder.build();
            }
        }
        Query<PackageInBundleGD> query = receivePackageGD_ReceivePackagesQuery.forCurrentThread();
        query.setParameter(0, bundleID);
        return query.list();
    }

}

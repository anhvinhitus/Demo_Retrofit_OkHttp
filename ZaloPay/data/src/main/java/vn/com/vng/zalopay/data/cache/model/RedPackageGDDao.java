package vn.com.vng.zalopay.data.cache.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import vn.com.vng.zalopay.data.cache.model.RedPackageGD;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RED_PACKAGE_GD".
*/
public class RedPackageGDDao extends AbstractDao<RedPackageGD, Long> {

    public static final String TABLENAME = "RED_PACKAGE_GD";

    /**
     * Properties of entity RedPackageGD.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Quantity = new Property(1, Integer.class, "quantity", false, "QUANTITY");
        public final static Property TotalLuck = new Property(2, Long.class, "totalLuck", false, "TOTAL_LUCK");
        public final static Property AmountEach = new Property(3, Long.class, "amountEach", false, "AMOUNT_EACH");
        public final static Property Type = new Property(4, Integer.class, "type", false, "TYPE");
        public final static Property SendMessage = new Property(5, String.class, "sendMessage", false, "SEND_MESSAGE");
        public final static Property ListZaloId = new Property(6, String.class, "listZaloId", false, "LIST_ZALO_ID");
        public final static Property State = new Property(7, Integer.class, "state", false, "STATE");
    };


    public RedPackageGDDao(DaoConfig config) {
        super(config);
    }
    
    public RedPackageGDDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RED_PACKAGE_GD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"QUANTITY\" INTEGER," + // 1: quantity
                "\"TOTAL_LUCK\" INTEGER," + // 2: totalLuck
                "\"AMOUNT_EACH\" INTEGER," + // 3: amountEach
                "\"TYPE\" INTEGER," + // 4: type
                "\"SEND_MESSAGE\" TEXT," + // 5: sendMessage
                "\"LIST_ZALO_ID\" TEXT," + // 6: listZaloId
                "\"STATE\" INTEGER);"); // 7: state
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RED_PACKAGE_GD\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, RedPackageGD entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer quantity = entity.getQuantity();
        if (quantity != null) {
            stmt.bindLong(2, quantity);
        }
 
        Long totalLuck = entity.getTotalLuck();
        if (totalLuck != null) {
            stmt.bindLong(3, totalLuck);
        }
 
        Long amountEach = entity.getAmountEach();
        if (amountEach != null) {
            stmt.bindLong(4, amountEach);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(5, type);
        }
 
        String sendMessage = entity.getSendMessage();
        if (sendMessage != null) {
            stmt.bindString(6, sendMessage);
        }
 
        String listZaloId = entity.getListZaloId();
        if (listZaloId != null) {
            stmt.bindString(7, listZaloId);
        }
 
        Integer state = entity.getState();
        if (state != null) {
            stmt.bindLong(8, state);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public RedPackageGD readEntity(Cursor cursor, int offset) {
        RedPackageGD entity = new RedPackageGD( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // quantity
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // totalLuck
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // amountEach
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // type
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // sendMessage
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // listZaloId
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7) // state
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, RedPackageGD entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setQuantity(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setTotalLuck(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setAmountEach(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setType(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setSendMessage(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setListZaloId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setState(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(RedPackageGD entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(RedPackageGD entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

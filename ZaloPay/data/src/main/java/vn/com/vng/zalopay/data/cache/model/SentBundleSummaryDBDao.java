package vn.com.vng.zalopay.data.cache.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SENT_BUNDLE_SUMMARY_DB".
*/
public class SentBundleSummaryDBDao extends AbstractDao<SentBundleSummaryDB, Long> {

    public static final String TABLENAME = "SENT_BUNDLE_SUMMARY_DB";

    /**
     * Properties of entity SentBundleSummaryDB.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TotalOfSentAmount = new Property(1, Long.class, "totalOfSentAmount", false, "TOTAL_OF_SENT_AMOUNT");
        public final static Property TotalOfSentBundle = new Property(2, Integer.class, "totalOfSentBundle", false, "TOTAL_OF_SENT_BUNDLE");
        public final static Property TimeCreate = new Property(3, Long.class, "timeCreate", false, "TIME_CREATE");
    }


    public SentBundleSummaryDBDao(DaoConfig config) {
        super(config);
    }
    
    public SentBundleSummaryDBDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SENT_BUNDLE_SUMMARY_DB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TOTAL_OF_SENT_AMOUNT\" INTEGER," + // 1: totalOfSentAmount
                "\"TOTAL_OF_SENT_BUNDLE\" INTEGER," + // 2: totalOfSentBundle
                "\"TIME_CREATE\" INTEGER);"); // 3: timeCreate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SENT_BUNDLE_SUMMARY_DB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SentBundleSummaryDB entity) {
        stmt.clearBindings();
 
        Long id = entity.id;
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long totalOfSentAmount = entity.totalOfSentAmount;
        if (totalOfSentAmount != null) {
            stmt.bindLong(2, totalOfSentAmount);
        }
 
        Integer totalOfSentBundle = entity.totalOfSentBundle;
        if (totalOfSentBundle != null) {
            stmt.bindLong(3, totalOfSentBundle);
        }
 
        Long timeCreate = entity.timeCreate;
        if (timeCreate != null) {
            stmt.bindLong(4, timeCreate);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SentBundleSummaryDB entity) {
        stmt.clearBindings();
 
        Long id = entity.id;
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long totalOfSentAmount = entity.totalOfSentAmount;
        if (totalOfSentAmount != null) {
            stmt.bindLong(2, totalOfSentAmount);
        }
 
        Integer totalOfSentBundle = entity.totalOfSentBundle;
        if (totalOfSentBundle != null) {
            stmt.bindLong(3, totalOfSentBundle);
        }
 
        Long timeCreate = entity.timeCreate;
        if (timeCreate != null) {
            stmt.bindLong(4, timeCreate);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SentBundleSummaryDB readEntity(Cursor cursor, int offset) {
        SentBundleSummaryDB entity = new SentBundleSummaryDB();
        readEntity(cursor, entity, offset);
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SentBundleSummaryDB entity, int offset) {
        entity.id = cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
        entity.totalOfSentAmount = cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1);
        entity.totalOfSentBundle = cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2);
        entity.timeCreate = cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SentBundleSummaryDB entity, long rowId) {
        entity.id = rowId;
        return rowId;
    }
    
    @Override
    public Long getKey(SentBundleSummaryDB entity) {
        if(entity != null) {
            return entity.id;
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SentBundleSummaryDB entity) {
        return entity.id != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

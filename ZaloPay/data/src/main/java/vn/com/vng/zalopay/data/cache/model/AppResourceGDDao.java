package vn.com.vng.zalopay.data.cache.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "APP_RESOURCE_GD".
*/
public class AppResourceGDDao extends AbstractDao<AppResourceGD, Void> {

    public static final String TABLENAME = "APP_RESOURCE_GD";

    /**
     * Properties of entity AppResourceGD.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Appid = new Property(0, int.class, "appid", false, "APPID");
        public final static Property Appname = new Property(1, String.class, "appname", false, "APPNAME");
        public final static Property Needdownloadrs = new Property(2, Integer.class, "needdownloadrs", false, "NEEDDOWNLOADRS");
        public final static Property Imageurl = new Property(3, String.class, "imageurl", false, "IMAGEURL");
        public final static Property Jsurl = new Property(4, String.class, "jsurl", false, "JSURL");
        public final static Property Status = new Property(5, Integer.class, "status", false, "STATUS");
        public final static Property Checksum = new Property(6, String.class, "checksum", false, "CHECKSUM");
        public final static Property Apptype = new Property(7, Integer.class, "apptype", false, "APPTYPE");
        public final static Property Weburl = new Property(8, String.class, "weburl", false, "WEBURL");
        public final static Property Iconurl = new Property(9, String.class, "iconurl", false, "ICONURL");
        public final static Property SortOrder = new Property(10, Integer.class, "sortOrder", false, "SORT_ORDER");
        public final static Property StateDownload = new Property(11, Integer.class, "stateDownload", false, "STATE_DOWNLOAD");
        public final static Property TimeDownload = new Property(12, Long.class, "timeDownload", false, "TIME_DOWNLOAD");
        public final static Property NumRetry = new Property(13, Integer.class, "numRetry", false, "NUM_RETRY");
    }


    public AppResourceGDDao(DaoConfig config) {
        super(config);
    }
    
    public AppResourceGDDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"APP_RESOURCE_GD\" (" + //
                "\"APPID\" INTEGER NOT NULL UNIQUE ," + // 0: appid
                "\"APPNAME\" TEXT," + // 1: appname
                "\"NEEDDOWNLOADRS\" INTEGER," + // 2: needdownloadrs
                "\"IMAGEURL\" TEXT," + // 3: imageurl
                "\"JSURL\" TEXT," + // 4: jsurl
                "\"STATUS\" INTEGER," + // 5: status
                "\"CHECKSUM\" TEXT," + // 6: checksum
                "\"APPTYPE\" INTEGER," + // 7: apptype
                "\"WEBURL\" TEXT," + // 8: weburl
                "\"ICONURL\" TEXT," + // 9: iconurl
                "\"SORT_ORDER\" INTEGER," + // 10: sortOrder
                "\"STATE_DOWNLOAD\" INTEGER," + // 11: stateDownload
                "\"TIME_DOWNLOAD\" INTEGER," + // 12: timeDownload
                "\"NUM_RETRY\" INTEGER);"); // 13: numRetry
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"APP_RESOURCE_GD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AppResourceGD entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.appid);
 
        String appname = entity.appname;
        if (appname != null) {
            stmt.bindString(2, appname);
        }
 
        Integer needdownloadrs = entity.needdownloadrs;
        if (needdownloadrs != null) {
            stmt.bindLong(3, needdownloadrs);
        }
 
        String imageurl = entity.imageurl;
        if (imageurl != null) {
            stmt.bindString(4, imageurl);
        }
 
        String jsurl = entity.jsurl;
        if (jsurl != null) {
            stmt.bindString(5, jsurl);
        }
 
        Integer status = entity.status;
        if (status != null) {
            stmt.bindLong(6, status);
        }
 
        String checksum = entity.checksum;
        if (checksum != null) {
            stmt.bindString(7, checksum);
        }
 
        Integer apptype = entity.apptype;
        if (apptype != null) {
            stmt.bindLong(8, apptype);
        }
 
        String weburl = entity.weburl;
        if (weburl != null) {
            stmt.bindString(9, weburl);
        }
 
        String iconurl = entity.iconurl;
        if (iconurl != null) {
            stmt.bindString(10, iconurl);
        }
 
        Integer sortOrder = entity.sortOrder;
        if (sortOrder != null) {
            stmt.bindLong(11, sortOrder);
        }
 
        Integer stateDownload = entity.stateDownload;
        if (stateDownload != null) {
            stmt.bindLong(12, stateDownload);
        }
 
        Long timeDownload = entity.timeDownload;
        if (timeDownload != null) {
            stmt.bindLong(13, timeDownload);
        }
 
        Integer numRetry = entity.numRetry;
        if (numRetry != null) {
            stmt.bindLong(14, numRetry);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AppResourceGD entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.appid);
 
        String appname = entity.appname;
        if (appname != null) {
            stmt.bindString(2, appname);
        }
 
        Integer needdownloadrs = entity.needdownloadrs;
        if (needdownloadrs != null) {
            stmt.bindLong(3, needdownloadrs);
        }
 
        String imageurl = entity.imageurl;
        if (imageurl != null) {
            stmt.bindString(4, imageurl);
        }
 
        String jsurl = entity.jsurl;
        if (jsurl != null) {
            stmt.bindString(5, jsurl);
        }
 
        Integer status = entity.status;
        if (status != null) {
            stmt.bindLong(6, status);
        }
 
        String checksum = entity.checksum;
        if (checksum != null) {
            stmt.bindString(7, checksum);
        }
 
        Integer apptype = entity.apptype;
        if (apptype != null) {
            stmt.bindLong(8, apptype);
        }
 
        String weburl = entity.weburl;
        if (weburl != null) {
            stmt.bindString(9, weburl);
        }
 
        String iconurl = entity.iconurl;
        if (iconurl != null) {
            stmt.bindString(10, iconurl);
        }
 
        Integer sortOrder = entity.sortOrder;
        if (sortOrder != null) {
            stmt.bindLong(11, sortOrder);
        }
 
        Integer stateDownload = entity.stateDownload;
        if (stateDownload != null) {
            stmt.bindLong(12, stateDownload);
        }
 
        Long timeDownload = entity.timeDownload;
        if (timeDownload != null) {
            stmt.bindLong(13, timeDownload);
        }
 
        Integer numRetry = entity.numRetry;
        if (numRetry != null) {
            stmt.bindLong(14, numRetry);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public AppResourceGD readEntity(Cursor cursor, int offset) {
        AppResourceGD entity = new AppResourceGD( //
            cursor.getInt(offset + 0), // appid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // appname
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // needdownloadrs
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // imageurl
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // jsurl
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // status
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // checksum
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // apptype
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // weburl
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // iconurl
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // sortOrder
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // stateDownload
            cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12), // timeDownload
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13) // numRetry
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AppResourceGD entity, int offset) {
        entity.appid = cursor.getInt(offset + 0);
        entity.appname = cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1);
        entity.needdownloadrs = cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2);
        entity.imageurl = cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3);
        entity.jsurl = cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4);
        entity.status = cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5);
        entity.checksum = cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6);
        entity.apptype = cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7);
        entity.weburl = cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8);
        entity.iconurl = cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9);
        entity.sortOrder = cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10);
        entity.stateDownload = cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11);
        entity.timeDownload = cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12);
        entity.numRetry = cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13);
     }
    
    @Override
    protected final Void updateKeyAfterInsert(AppResourceGD entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(AppResourceGD entity) {
        return null;
    }

    @Override
    public boolean hasKey(AppResourceGD entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

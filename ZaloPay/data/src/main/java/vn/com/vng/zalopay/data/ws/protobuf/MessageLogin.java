// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: zpmsguser.proto at 65:1
package vn.com.vng.zalopay.data.ws.protobuf;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class MessageLogin extends Message<MessageLogin, MessageLogin.Builder> {
  public static final ProtoAdapter<MessageLogin> ADAPTER = new ProtoAdapter_MessageLogin();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_USRID = 0L;

  public static final String DEFAULT_TOKEN = "";

  public static final Integer DEFAULT_OSTYPE = 0;

  public static final String DEFAULT_DEVICETOKEN = "";

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64",
      label = WireField.Label.REQUIRED
  )
  public final Long usrid;

  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REQUIRED
  )
  public final String token;

  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer ostype;

  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String devicetoken;

  public MessageLogin(Long usrid, String token, Integer ostype, String devicetoken) {
    this(usrid, token, ostype, devicetoken, ByteString.EMPTY);
  }

  public MessageLogin(Long usrid, String token, Integer ostype, String devicetoken, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.usrid = usrid;
    this.token = token;
    this.ostype = ostype;
    this.devicetoken = devicetoken;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.usrid = usrid;
    builder.token = token;
    builder.ostype = ostype;
    builder.devicetoken = devicetoken;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof MessageLogin)) return false;
    MessageLogin o = (MessageLogin) other;
    return unknownFields().equals(o.unknownFields())
        && usrid.equals(o.usrid)
        && token.equals(o.token)
        && Internal.equals(ostype, o.ostype)
        && Internal.equals(devicetoken, o.devicetoken);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + usrid.hashCode();
      result = result * 37 + token.hashCode();
      result = result * 37 + (ostype != null ? ostype.hashCode() : 0);
      result = result * 37 + (devicetoken != null ? devicetoken.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", usrid=").append(usrid);
    builder.append(", token=").append(token);
    if (ostype != null) builder.append(", ostype=").append(ostype);
    if (devicetoken != null) builder.append(", devicetoken=").append(devicetoken);
    return builder.replace(0, 2, "MessageLogin{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<MessageLogin, Builder> {
    public Long usrid;

    public String token;

    public Integer ostype;

    public String devicetoken;

    public Builder() {
    }

    public Builder usrid(Long usrid) {
      this.usrid = usrid;
      return this;
    }

    public Builder token(String token) {
      this.token = token;
      return this;
    }

    public Builder ostype(Integer ostype) {
      this.ostype = ostype;
      return this;
    }

    public Builder devicetoken(String devicetoken) {
      this.devicetoken = devicetoken;
      return this;
    }

    @Override
    public MessageLogin build() {
      if (usrid == null
          || token == null) {
        throw Internal.missingRequiredFields(usrid, "usrid",
            token, "token");
      }
      return new MessageLogin(usrid, token, ostype, devicetoken, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_MessageLogin extends ProtoAdapter<MessageLogin> {
    ProtoAdapter_MessageLogin() {
      super(FieldEncoding.LENGTH_DELIMITED, MessageLogin.class);
    }

    @Override
    public int encodedSize(MessageLogin value) {
      return ProtoAdapter.UINT64.encodedSizeWithTag(1, value.usrid)
          + ProtoAdapter.STRING.encodedSizeWithTag(2, value.token)
          + (value.ostype != null ? ProtoAdapter.INT32.encodedSizeWithTag(3, value.ostype) : 0)
          + (value.devicetoken != null ? ProtoAdapter.STRING.encodedSizeWithTag(4, value.devicetoken) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, MessageLogin value) throws IOException {
      ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.usrid);
      ProtoAdapter.STRING.encodeWithTag(writer, 2, value.token);
      if (value.ostype != null) ProtoAdapter.INT32.encodeWithTag(writer, 3, value.ostype);
      if (value.devicetoken != null) ProtoAdapter.STRING.encodeWithTag(writer, 4, value.devicetoken);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public MessageLogin decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.usrid(ProtoAdapter.UINT64.decode(reader)); break;
          case 2: builder.token(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.ostype(ProtoAdapter.INT32.decode(reader)); break;
          case 4: builder.devicetoken(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public MessageLogin redact(MessageLogin value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}

package vn.com.vng.zalopay.data.cache.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import vn.com.vng.zalopay.data.cache.model.BankCardGD;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BANK_CARD_GD".
*/
public class BankCardGDDao extends AbstractDao<BankCardGD, String> {

    public static final String TABLENAME = "BANK_CARD_GD";

    /**
     * Properties of entity BankCardGD.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Cardhash = new Property(0, String.class, "cardhash", true, "CARDHASH");
        public final static Property Cardname = new Property(1, String.class, "cardname", false, "CARDNAME");
        public final static Property First6cardno = new Property(2, String.class, "first6cardno", false, "FIRST6CARDNO");
        public final static Property Last4cardno = new Property(3, String.class, "last4cardno", false, "LAST4CARDNO");
        public final static Property Bankcode = new Property(4, String.class, "bankcode", false, "BANKCODE");
    }


    public BankCardGDDao(DaoConfig config) {
        super(config);
    }
    
    public BankCardGDDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BANK_CARD_GD\" (" + //
                "\"CARDHASH\" TEXT PRIMARY KEY NOT NULL ," + // 0: cardhash
                "\"CARDNAME\" TEXT NOT NULL ," + // 1: cardname
                "\"FIRST6CARDNO\" TEXT NOT NULL ," + // 2: first6cardno
                "\"LAST4CARDNO\" TEXT NOT NULL ," + // 3: last4cardno
                "\"BANKCODE\" TEXT NOT NULL );"); // 4: bankcode
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BANK_CARD_GD\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, BankCardGD entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getCardhash());
        stmt.bindString(2, entity.getCardname());
        stmt.bindString(3, entity.getFirst6cardno());
        stmt.bindString(4, entity.getLast4cardno());
        stmt.bindString(5, entity.getBankcode());
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public BankCardGD readEntity(Cursor cursor, int offset) {
        BankCardGD entity = new BankCardGD( //
            cursor.getString(offset + 0), // cardhash
            cursor.getString(offset + 1), // cardname
            cursor.getString(offset + 2), // first6cardno
            cursor.getString(offset + 3), // last4cardno
            cursor.getString(offset + 4) // bankcode
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, BankCardGD entity, int offset) {
        entity.setCardhash(cursor.getString(offset + 0));
        entity.setCardname(cursor.getString(offset + 1));
        entity.setFirst6cardno(cursor.getString(offset + 2));
        entity.setLast4cardno(cursor.getString(offset + 3));
        entity.setBankcode(cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(BankCardGD entity, long rowId) {
        return entity.getCardhash();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(BankCardGD entity) {
        if(entity != null) {
            return entity.getCardhash();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

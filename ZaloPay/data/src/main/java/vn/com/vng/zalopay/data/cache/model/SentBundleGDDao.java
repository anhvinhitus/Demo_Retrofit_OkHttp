package vn.com.vng.zalopay.data.cache.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import vn.com.vng.zalopay.data.cache.model.SentBundleGD;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SENT_BUNDLE_GD".
*/
public class SentBundleGDDao extends AbstractDao<SentBundleGD, Long> {

    public static final String TABLENAME = "SENT_BUNDLE_GD";

    /**
     * Properties of entity SentBundleGD.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property SenderZaloPayID = new Property(1, String.class, "senderZaloPayID", false, "SENDER_ZALO_PAY_ID");
        public final static Property Type = new Property(2, Integer.class, "type", false, "TYPE");
        public final static Property CreateTime = new Property(3, Long.class, "createTime", false, "CREATE_TIME");
        public final static Property LastOpenTime = new Property(4, Long.class, "lastOpenTime", false, "LAST_OPEN_TIME");
        public final static Property TotalLuck = new Property(5, Integer.class, "totalLuck", false, "TOTAL_LUCK");
        public final static Property NumOfOpenedPakages = new Property(6, Integer.class, "numOfOpenedPakages", false, "NUM_OF_OPENED_PAKAGES");
        public final static Property NumOfPackages = new Property(7, Integer.class, "numOfPackages", false, "NUM_OF_PACKAGES");
    };

    private DaoSession daoSession;


    public SentBundleGDDao(DaoConfig config) {
        super(config);
    }
    
    public SentBundleGDDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SENT_BUNDLE_GD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL UNIQUE ," + // 0: id
                "\"SENDER_ZALO_PAY_ID\" TEXT NOT NULL ," + // 1: senderZaloPayID
                "\"TYPE\" INTEGER," + // 2: type
                "\"CREATE_TIME\" INTEGER," + // 3: createTime
                "\"LAST_OPEN_TIME\" INTEGER," + // 4: lastOpenTime
                "\"TOTAL_LUCK\" INTEGER," + // 5: totalLuck
                "\"NUM_OF_OPENED_PAKAGES\" INTEGER," + // 6: numOfOpenedPakages
                "\"NUM_OF_PACKAGES\" INTEGER);"); // 7: numOfPackages
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SENT_BUNDLE_GD\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SentBundleGD entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindString(2, entity.getSenderZaloPayID());
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(3, type);
        }
 
        Long createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(4, createTime);
        }
 
        Long lastOpenTime = entity.getLastOpenTime();
        if (lastOpenTime != null) {
            stmt.bindLong(5, lastOpenTime);
        }
 
        Integer totalLuck = entity.getTotalLuck();
        if (totalLuck != null) {
            stmt.bindLong(6, totalLuck);
        }
 
        Integer numOfOpenedPakages = entity.getNumOfOpenedPakages();
        if (numOfOpenedPakages != null) {
            stmt.bindLong(7, numOfOpenedPakages);
        }
 
        Integer numOfPackages = entity.getNumOfPackages();
        if (numOfPackages != null) {
            stmt.bindLong(8, numOfPackages);
        }
    }

    @Override
    protected void attachEntity(SentBundleGD entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SentBundleGD readEntity(Cursor cursor, int offset) {
        SentBundleGD entity = new SentBundleGD( //
            cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // senderZaloPayID
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // type
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // createTime
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // lastOpenTime
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // totalLuck
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // numOfOpenedPakages
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7) // numOfPackages
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SentBundleGD entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setSenderZaloPayID(cursor.getString(offset + 1));
        entity.setType(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setCreateTime(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setLastOpenTime(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setTotalLuck(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setNumOfOpenedPakages(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setNumOfPackages(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(SentBundleGD entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(SentBundleGD entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

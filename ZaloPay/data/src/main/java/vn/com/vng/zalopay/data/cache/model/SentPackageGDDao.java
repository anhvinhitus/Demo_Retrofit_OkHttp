package vn.com.vng.zalopay.data.cache.model;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import vn.com.vng.zalopay.data.cache.model.SentPackageGD;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SENT_PACKAGE_GD".
*/
public class SentPackageGDDao extends AbstractDao<SentPackageGD, Long> {

    public static final String TABLENAME = "SENT_PACKAGE_GD";

    /**
     * Properties of entity SentPackageGD.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property RevZaloPayID = new Property(1, String.class, "revZaloPayID", false, "REV_ZALO_PAY_ID");
        public final static Property RevZaloID = new Property(2, Long.class, "revZaloID", false, "REV_ZALO_ID");
        public final static Property RevFullName = new Property(3, String.class, "revFullName", false, "REV_FULL_NAME");
        public final static Property RevAvatarURL = new Property(4, String.class, "revAvatarURL", false, "REV_AVATAR_URL");
        public final static Property OpenTime = new Property(5, Long.class, "openTime", false, "OPEN_TIME");
        public final static Property Amount = new Property(6, Long.class, "amount", false, "AMOUNT");
        public final static Property SendMessage = new Property(7, String.class, "sendMessage", false, "SEND_MESSAGE");
        public final static Property IsLuckiest = new Property(8, Integer.class, "isLuckiest", false, "IS_LUCKIEST");
    };

    private Query<SentPackageGD> sentBundleGD_SentPackagesQuery;

    public SentPackageGDDao(DaoConfig config) {
        super(config);
    }
    
    public SentPackageGDDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SENT_PACKAGE_GD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL UNIQUE ," + // 0: id
                "\"REV_ZALO_PAY_ID\" TEXT," + // 1: revZaloPayID
                "\"REV_ZALO_ID\" INTEGER," + // 2: revZaloID
                "\"REV_FULL_NAME\" TEXT," + // 3: revFullName
                "\"REV_AVATAR_URL\" TEXT," + // 4: revAvatarURL
                "\"OPEN_TIME\" INTEGER," + // 5: openTime
                "\"AMOUNT\" INTEGER," + // 6: amount
                "\"SEND_MESSAGE\" TEXT," + // 7: sendMessage
                "\"IS_LUCKIEST\" INTEGER);"); // 8: isLuckiest
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SENT_PACKAGE_GD\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SentPackageGD entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String revZaloPayID = entity.getRevZaloPayID();
        if (revZaloPayID != null) {
            stmt.bindString(2, revZaloPayID);
        }
 
        Long revZaloID = entity.getRevZaloID();
        if (revZaloID != null) {
            stmt.bindLong(3, revZaloID);
        }
 
        String revFullName = entity.getRevFullName();
        if (revFullName != null) {
            stmt.bindString(4, revFullName);
        }
 
        String revAvatarURL = entity.getRevAvatarURL();
        if (revAvatarURL != null) {
            stmt.bindString(5, revAvatarURL);
        }
 
        Long openTime = entity.getOpenTime();
        if (openTime != null) {
            stmt.bindLong(6, openTime);
        }
 
        Long amount = entity.getAmount();
        if (amount != null) {
            stmt.bindLong(7, amount);
        }
 
        String sendMessage = entity.getSendMessage();
        if (sendMessage != null) {
            stmt.bindString(8, sendMessage);
        }
 
        Integer isLuckiest = entity.getIsLuckiest();
        if (isLuckiest != null) {
            stmt.bindLong(9, isLuckiest);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SentPackageGD readEntity(Cursor cursor, int offset) {
        SentPackageGD entity = new SentPackageGD( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // revZaloPayID
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // revZaloID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // revFullName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // revAvatarURL
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // openTime
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // amount
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // sendMessage
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8) // isLuckiest
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SentPackageGD entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setRevZaloPayID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRevZaloID(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setRevFullName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRevAvatarURL(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setOpenTime(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setAmount(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setSendMessage(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIsLuckiest(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(SentPackageGD entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(SentPackageGD entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "sentPackages" to-many relationship of SentBundleGD. */
    public List<SentPackageGD> _querySentBundleGD_SentPackages(long id) {
        synchronized (this) {
            if (sentBundleGD_SentPackagesQuery == null) {
                QueryBuilder<SentPackageGD> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Id.eq(null));
                queryBuilder.orderRaw("T.'OPEN_TIME' DESC");
                sentBundleGD_SentPackagesQuery = queryBuilder.build();
            }
        }
        Query<SentPackageGD> query = sentBundleGD_SentPackagesQuery.forCurrentThread();
        query.setParameter(0, id);
        return query.list();
    }

}

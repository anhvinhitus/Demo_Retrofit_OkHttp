package vn.com.vng.zalopay.data.cache.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ZALO_FRIEND_GD".
*/
public class ZaloFriendGDDao extends AbstractDao<ZaloFriendGD, Long> {

    public static final String TABLENAME = "ZALO_FRIEND_GD";

    /**
     * Properties of entity ZaloFriendGD.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ZaloId = new Property(0, long.class, "zaloId", true, "_id");
        public final static Property UserName = new Property(1, String.class, "userName", false, "USER_NAME");
        public final static Property DisplayName = new Property(2, String.class, "displayName", false, "DISPLAY_NAME");
        public final static Property Avatar = new Property(3, String.class, "avatar", false, "AVATAR");
        public final static Property UserGender = new Property(4, Integer.class, "userGender", false, "USER_GENDER");
        public final static Property Birthday = new Property(5, String.class, "birthday", false, "BIRTHDAY");
        public final static Property UsingApp = new Property(6, Boolean.class, "usingApp", false, "USING_APP");
        public final static Property Fulltextsearch = new Property(7, String.class, "fulltextsearch", false, "FULLTEXTSEARCH");
        public final static Property ZaloPayId = new Property(8, String.class, "zaloPayId", false, "ZALO_PAY_ID");
        public final static Property Status = new Property(9, Integer.class, "status", false, "STATUS");
        public final static Property PhoneNumber = new Property(10, Long.class, "phoneNumber", false, "PHONE_NUMBER");
        public final static Property ZaloPayName = new Property(11, String.class, "zaloPayName", false, "ZALO_PAY_NAME");
    }


    public ZaloFriendGDDao(DaoConfig config) {
        super(config);
    }
    
    public ZaloFriendGDDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ZALO_FRIEND_GD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: zaloId
                "\"USER_NAME\" TEXT," + // 1: userName
                "\"DISPLAY_NAME\" TEXT," + // 2: displayName
                "\"AVATAR\" TEXT," + // 3: avatar
                "\"USER_GENDER\" INTEGER," + // 4: userGender
                "\"BIRTHDAY\" TEXT," + // 5: birthday
                "\"USING_APP\" INTEGER," + // 6: usingApp
                "\"FULLTEXTSEARCH\" TEXT," + // 7: fulltextsearch
                "\"ZALO_PAY_ID\" TEXT," + // 8: zaloPayId
                "\"STATUS\" INTEGER," + // 9: status
                "\"PHONE_NUMBER\" INTEGER," + // 10: phoneNumber
                "\"ZALO_PAY_NAME\" TEXT);"); // 11: zaloPayName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ZALO_FRIEND_GD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ZaloFriendGD entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.zaloId);
 
        String userName = entity.userName;
        if (userName != null) {
            stmt.bindString(2, userName);
        }
 
        String displayName = entity.displayName;
        if (displayName != null) {
            stmt.bindString(3, displayName);
        }
 
        String avatar = entity.avatar;
        if (avatar != null) {
            stmt.bindString(4, avatar);
        }
 
        Integer userGender = entity.userGender;
        if (userGender != null) {
            stmt.bindLong(5, userGender);
        }
 
        String birthday = entity.birthday;
        if (birthday != null) {
            stmt.bindString(6, birthday);
        }
 
        Boolean usingApp = entity.usingApp;
        if (usingApp != null) {
            stmt.bindLong(7, usingApp ? 1L: 0L);
        }
 
        String fulltextsearch = entity.fulltextsearch;
        if (fulltextsearch != null) {
            stmt.bindString(8, fulltextsearch);
        }
 
        String zaloPayId = entity.zaloPayId;
        if (zaloPayId != null) {
            stmt.bindString(9, zaloPayId);
        }
 
        Integer status = entity.status;
        if (status != null) {
            stmt.bindLong(10, status);
        }
 
        Long phoneNumber = entity.phoneNumber;
        if (phoneNumber != null) {
            stmt.bindLong(11, phoneNumber);
        }
 
        String zaloPayName = entity.zaloPayName;
        if (zaloPayName != null) {
            stmt.bindString(12, zaloPayName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ZaloFriendGD entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.zaloId);
 
        String userName = entity.userName;
        if (userName != null) {
            stmt.bindString(2, userName);
        }
 
        String displayName = entity.displayName;
        if (displayName != null) {
            stmt.bindString(3, displayName);
        }
 
        String avatar = entity.avatar;
        if (avatar != null) {
            stmt.bindString(4, avatar);
        }
 
        Integer userGender = entity.userGender;
        if (userGender != null) {
            stmt.bindLong(5, userGender);
        }
 
        String birthday = entity.birthday;
        if (birthday != null) {
            stmt.bindString(6, birthday);
        }
 
        Boolean usingApp = entity.usingApp;
        if (usingApp != null) {
            stmt.bindLong(7, usingApp ? 1L: 0L);
        }
 
        String fulltextsearch = entity.fulltextsearch;
        if (fulltextsearch != null) {
            stmt.bindString(8, fulltextsearch);
        }
 
        String zaloPayId = entity.zaloPayId;
        if (zaloPayId != null) {
            stmt.bindString(9, zaloPayId);
        }
 
        Integer status = entity.status;
        if (status != null) {
            stmt.bindLong(10, status);
        }
 
        Long phoneNumber = entity.phoneNumber;
        if (phoneNumber != null) {
            stmt.bindLong(11, phoneNumber);
        }
 
        String zaloPayName = entity.zaloPayName;
        if (zaloPayName != null) {
            stmt.bindString(12, zaloPayName);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public ZaloFriendGD readEntity(Cursor cursor, int offset) {
        ZaloFriendGD entity = new ZaloFriendGD( //
            cursor.getLong(offset + 0), // zaloId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // displayName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // avatar
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // userGender
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // birthday
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // usingApp
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // fulltextsearch
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // zaloPayId
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // status
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10), // phoneNumber
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // zaloPayName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ZaloFriendGD entity, int offset) {
        entity.zaloId = cursor.getLong(offset + 0);
        entity.userName = cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1);
        entity.displayName = cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2);
        entity.avatar = cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3);
        entity.userGender = cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4);
        entity.birthday = cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5);
        entity.usingApp = cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0;
        entity.fulltextsearch = cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7);
        entity.zaloPayId = cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8);
        entity.status = cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9);
        entity.phoneNumber = cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10);
        entity.zaloPayName = cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ZaloFriendGD entity, long rowId) {
        entity.zaloId = rowId;
        return rowId;
    }
    
    @Override
    public Long getKey(ZaloFriendGD entity) {
        if(entity != null) {
            return entity.zaloId;
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ZaloFriendGD entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

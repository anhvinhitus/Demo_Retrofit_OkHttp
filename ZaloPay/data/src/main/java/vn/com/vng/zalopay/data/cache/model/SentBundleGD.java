package vn.com.vng.zalopay.data.cache.model;

import org.greenrobot.greendao.annotation.*;

import java.util.List;
import vn.com.vng.zalopay.data.cache.model.DaoSession;
import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.

/**
 * Entity mapped to table "SENT_BUNDLE_GD".
 */
@Entity(active = true)
public class SentBundleGD {

    @Id
    @Unique
    private long id;

    @NotNull
    private String senderZaloPayID;
    private Integer type;
    private Long createTime;
    private Long lastOpenTime;
    private Integer totalLuck;
    private Integer numOfOpenedPakages;
    private Integer numOfPackages;
    private String sendMessage;
    private Integer status;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient SentBundleGDDao myDao;

    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "bundleID")
    })
    @OrderBy("openTime DESC")
    private List<PackageInBundleGD> sentPackages;

    @Generated
    public SentBundleGD() {
    }

    public SentBundleGD(long id) {
        this.id = id;
    }

    @Generated
    public SentBundleGD(long id, String senderZaloPayID, Integer type, Long createTime, Long lastOpenTime, Integer totalLuck, Integer numOfOpenedPakages, Integer numOfPackages, String sendMessage, Integer status) {
        this.id = id;
        this.senderZaloPayID = senderZaloPayID;
        this.type = type;
        this.createTime = createTime;
        this.lastOpenTime = lastOpenTime;
        this.totalLuck = totalLuck;
        this.numOfOpenedPakages = numOfOpenedPakages;
        this.numOfPackages = numOfPackages;
        this.sendMessage = sendMessage;
        this.status = status;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getSentBundleGDDao() : null;
    }

    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }

    @NotNull
    public String getSenderZaloPayID() {
        return senderZaloPayID;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setSenderZaloPayID(@NotNull String senderZaloPayID) {
        this.senderZaloPayID = senderZaloPayID;
    }

    public Integer getType() {
        return type;
    }

    public void setType(Integer type) {
        this.type = type;
    }

    public Long getCreateTime() {
        return createTime;
    }

    public void setCreateTime(Long createTime) {
        this.createTime = createTime;
    }

    public Long getLastOpenTime() {
        return lastOpenTime;
    }

    public void setLastOpenTime(Long lastOpenTime) {
        this.lastOpenTime = lastOpenTime;
    }

    public Integer getTotalLuck() {
        return totalLuck;
    }

    public void setTotalLuck(Integer totalLuck) {
        this.totalLuck = totalLuck;
    }

    public Integer getNumOfOpenedPakages() {
        return numOfOpenedPakages;
    }

    public void setNumOfOpenedPakages(Integer numOfOpenedPakages) {
        this.numOfOpenedPakages = numOfOpenedPakages;
    }

    public Integer getNumOfPackages() {
        return numOfPackages;
    }

    public void setNumOfPackages(Integer numOfPackages) {
        this.numOfPackages = numOfPackages;
    }

    public String getSendMessage() {
        return sendMessage;
    }

    public void setSendMessage(String sendMessage) {
        this.sendMessage = sendMessage;
    }

    public Integer getStatus() {
        return status;
    }

    public void setStatus(Integer status) {
        this.status = status;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<PackageInBundleGD> getSentPackages() {
        if (sentPackages == null) {
            __throwIfDetached();
            PackageInBundleGDDao targetDao = daoSession.getPackageInBundleGDDao();
            List<PackageInBundleGD> sentPackagesNew = targetDao._querySentBundleGD_SentPackages(id);
            synchronized (this) {
                if(sentPackages == null) {
                    sentPackages = sentPackagesNew;
                }
            }
        }
        return sentPackages;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetSentPackages() {
        sentPackages = null;
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

}

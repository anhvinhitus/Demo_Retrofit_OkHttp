package vn.com.vng.zalopay.data.cache.model;

import java.util.List;
import vn.com.vng.zalopay.data.cache.model.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "RECEIVE_PACKAGE_GD".
 */
public class ReceivePackageGD {

    private long id;
    private Long bundleID;
    private String revZaloPayID;
    private String sendZaloPayID;
    private String sendFullName;
    private Long amount;
    private Long openedTime;
    private Boolean isOpen;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ReceivePackageGDDao myDao;

    private List<PackageInBundleGD> receivePackages;

    public ReceivePackageGD() {
    }

    public ReceivePackageGD(long id) {
        this.id = id;
    }

    public ReceivePackageGD(long id, Long bundleID, String revZaloPayID, String sendZaloPayID, String sendFullName, Long amount, Long openedTime, Boolean isOpen) {
        this.id = id;
        this.bundleID = bundleID;
        this.revZaloPayID = revZaloPayID;
        this.sendZaloPayID = sendZaloPayID;
        this.sendFullName = sendFullName;
        this.amount = amount;
        this.openedTime = openedTime;
        this.isOpen = isOpen;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getReceivePackageGDDao() : null;
    }

    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }

    public Long getBundleID() {
        return bundleID;
    }

    public void setBundleID(Long bundleID) {
        this.bundleID = bundleID;
    }

    public String getRevZaloPayID() {
        return revZaloPayID;
    }

    public void setRevZaloPayID(String revZaloPayID) {
        this.revZaloPayID = revZaloPayID;
    }

    public String getSendZaloPayID() {
        return sendZaloPayID;
    }

    public void setSendZaloPayID(String sendZaloPayID) {
        this.sendZaloPayID = sendZaloPayID;
    }

    public String getSendFullName() {
        return sendFullName;
    }

    public void setSendFullName(String sendFullName) {
        this.sendFullName = sendFullName;
    }

    public Long getAmount() {
        return amount;
    }

    public void setAmount(Long amount) {
        this.amount = amount;
    }

    public Long getOpenedTime() {
        return openedTime;
    }

    public void setOpenedTime(Long openedTime) {
        this.openedTime = openedTime;
    }

    public Boolean getIsOpen() {
        return isOpen;
    }

    public void setIsOpen(Boolean isOpen) {
        this.isOpen = isOpen;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<PackageInBundleGD> getReceivePackages() {
        if (receivePackages == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PackageInBundleGDDao targetDao = daoSession.getPackageInBundleGDDao();
            List<PackageInBundleGD> receivePackagesNew = targetDao._queryReceivePackageGD_ReceivePackages(id);
            synchronized (this) {
                if(receivePackages == null) {
                    receivePackages = receivePackagesNew;
                }
            }
        }
        return receivePackages;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetReceivePackages() {
        receivePackages = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}

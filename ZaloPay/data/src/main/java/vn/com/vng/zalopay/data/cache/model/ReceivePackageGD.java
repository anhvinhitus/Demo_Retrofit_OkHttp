package vn.com.vng.zalopay.data.cache.model;

import org.greenrobot.greendao.annotation.*;

import java.util.List;
import vn.com.vng.zalopay.data.cache.model.DaoSession;
import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.

/**
 * Entity mapped to table "RECEIVE_PACKAGE_GD".
 */
@Entity(active = true)
public class ReceivePackageGD {

    @Id
    @Unique
    public long id;
    public Long bundleID;
    public String receiverZaloPayID;
    public String senderZaloPayID;
    public String senderFullName;
    public String senderAvatar;
    public Long amount;
    public Long openedTime;
    public Integer status;
    public String messageStatus;
    public String message;
    public Integer isLuckiest;
    public Long createTime;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient ReceivePackageGDDao myDao;

    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "bundleID")
    })
    @OrderBy("openTime DESC")
    private List<PackageInBundleGD> receivePackages;

    @Generated
    public ReceivePackageGD() {
    }

    public ReceivePackageGD(long id) {
        this.id = id;
    }

    @Generated
    public ReceivePackageGD(long id, Long bundleID, String receiverZaloPayID, String senderZaloPayID, String senderFullName, String senderAvatar, Long amount, Long openedTime, Integer status, String messageStatus, String message, Integer isLuckiest, Long createTime) {
        this.id = id;
        this.bundleID = bundleID;
        this.receiverZaloPayID = receiverZaloPayID;
        this.senderZaloPayID = senderZaloPayID;
        this.senderFullName = senderFullName;
        this.senderAvatar = senderAvatar;
        this.amount = amount;
        this.openedTime = openedTime;
        this.status = status;
        this.messageStatus = messageStatus;
        this.message = message;
        this.isLuckiest = isLuckiest;
        this.createTime = createTime;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getReceivePackageGDDao() : null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<PackageInBundleGD> getReceivePackages() {
        if (receivePackages == null) {
            __throwIfDetached();
            PackageInBundleGDDao targetDao = daoSession.getPackageInBundleGDDao();
            List<PackageInBundleGD> receivePackagesNew = targetDao._queryReceivePackageGD_ReceivePackages(id);
            synchronized (this) {
                if(receivePackages == null) {
                    receivePackages = receivePackagesNew;
                }
            }
        }
        return receivePackages;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetReceivePackages() {
        receivePackages = null;
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

}

package vn.com.vng.zalopay.data.cache.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import vn.com.vng.zalopay.data.cache.model.TransactionLog;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TRANSACTION_LOG".
*/
public class TransactionLogDao extends AbstractDao<TransactionLog, Long> {

    public static final String TABLENAME = "TRANSACTION_LOG";

    /**
     * Properties of entity TransactionLog.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Transid = new Property(0, long.class, "transid", true, "TRANSID");
        public final static Property Appid = new Property(1, long.class, "appid", false, "APPID");
        public final static Property Userid = new Property(2, String.class, "userid", false, "USERID");
        public final static Property Appuser = new Property(3, String.class, "appuser", false, "APPUSER");
        public final static Property Platform = new Property(4, String.class, "platform", false, "PLATFORM");
        public final static Property Description = new Property(5, String.class, "description", false, "DESCRIPTION");
        public final static Property Pmcid = new Property(6, Integer.class, "pmcid", false, "PMCID");
        public final static Property Reqdate = new Property(7, Long.class, "reqdate", false, "REQDATE");
        public final static Property Userchargeamt = new Property(8, Integer.class, "userchargeamt", false, "USERCHARGEAMT");
        public final static Property Userfeeamt = new Property(9, Integer.class, "userfeeamt", false, "USERFEEAMT");
        public final static Property Amount = new Property(10, Integer.class, "amount", false, "AMOUNT");
        public final static Property Type = new Property(11, Integer.class, "type", false, "TYPE");
    };


    public TransactionLogDao(DaoConfig config) {
        super(config);
    }
    
    public TransactionLogDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TRANSACTION_LOG\" (" + //
                "\"TRANSID\" INTEGER PRIMARY KEY NOT NULL UNIQUE ," + // 0: transid
                "\"APPID\" INTEGER NOT NULL ," + // 1: appid
                "\"USERID\" TEXT," + // 2: userid
                "\"APPUSER\" TEXT," + // 3: appuser
                "\"PLATFORM\" TEXT," + // 4: platform
                "\"DESCRIPTION\" TEXT," + // 5: description
                "\"PMCID\" INTEGER," + // 6: pmcid
                "\"REQDATE\" INTEGER," + // 7: reqdate
                "\"USERCHARGEAMT\" INTEGER," + // 8: userchargeamt
                "\"USERFEEAMT\" INTEGER," + // 9: userfeeamt
                "\"AMOUNT\" INTEGER," + // 10: amount
                "\"TYPE\" INTEGER);"); // 11: type
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TRANSACTION_LOG\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TransactionLog entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getTransid());
        stmt.bindLong(2, entity.getAppid());
 
        String userid = entity.getUserid();
        if (userid != null) {
            stmt.bindString(3, userid);
        }
 
        String appuser = entity.getAppuser();
        if (appuser != null) {
            stmt.bindString(4, appuser);
        }
 
        String platform = entity.getPlatform();
        if (platform != null) {
            stmt.bindString(5, platform);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(6, description);
        }
 
        Integer pmcid = entity.getPmcid();
        if (pmcid != null) {
            stmt.bindLong(7, pmcid);
        }
 
        Long reqdate = entity.getReqdate();
        if (reqdate != null) {
            stmt.bindLong(8, reqdate);
        }
 
        Integer userchargeamt = entity.getUserchargeamt();
        if (userchargeamt != null) {
            stmt.bindLong(9, userchargeamt);
        }
 
        Integer userfeeamt = entity.getUserfeeamt();
        if (userfeeamt != null) {
            stmt.bindLong(10, userfeeamt);
        }
 
        Integer amount = entity.getAmount();
        if (amount != null) {
            stmt.bindLong(11, amount);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(12, type);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TransactionLog readEntity(Cursor cursor, int offset) {
        TransactionLog entity = new TransactionLog( //
            cursor.getLong(offset + 0), // transid
            cursor.getLong(offset + 1), // appid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // appuser
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // platform
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // description
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // pmcid
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // reqdate
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // userchargeamt
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // userfeeamt
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // amount
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11) // type
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TransactionLog entity, int offset) {
        entity.setTransid(cursor.getLong(offset + 0));
        entity.setAppid(cursor.getLong(offset + 1));
        entity.setUserid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAppuser(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPlatform(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDescription(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPmcid(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setReqdate(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setUserchargeamt(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setUserfeeamt(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setAmount(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setType(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TransactionLog entity, long rowId) {
        entity.setTransid(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TransactionLog entity) {
        if(entity != null) {
            return entity.getTransid();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

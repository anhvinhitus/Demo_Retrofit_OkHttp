package vn.com.vng.zalopay.data.cache.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TRANSACTION_LOG".
*/
public class TransactionLogDao extends AbstractDao<TransactionLog, Long> {

    public static final String TABLENAME = "TRANSACTION_LOG";

    /**
     * Properties of entity TransactionLog.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Transid = new Property(0, long.class, "transid", true, "TRANSID");
        public final static Property Appid = new Property(1, long.class, "appid", false, "APPID");
        public final static Property Userid = new Property(2, String.class, "userid", false, "USERID");
        public final static Property Appuser = new Property(3, String.class, "appuser", false, "APPUSER");
        public final static Property Platform = new Property(4, String.class, "platform", false, "PLATFORM");
        public final static Property Description = new Property(5, String.class, "description", false, "DESCRIPTION");
        public final static Property Pmcid = new Property(6, Integer.class, "pmcid", false, "PMCID");
        public final static Property Reqdate = new Property(7, Long.class, "reqdate", false, "REQDATE");
        public final static Property Userchargeamt = new Property(8, Integer.class, "userchargeamt", false, "USERCHARGEAMT");
        public final static Property Userfeeamt = new Property(9, Integer.class, "userfeeamt", false, "USERFEEAMT");
        public final static Property Amount = new Property(10, Integer.class, "amount", false, "AMOUNT");
        public final static Property Type = new Property(11, Integer.class, "type", false, "TYPE");
        public final static Property Sign = new Property(12, Integer.class, "sign", false, "SIGN");
        public final static Property Username = new Property(13, String.class, "username", false, "USERNAME");
        public final static Property Appusername = new Property(14, String.class, "appusername", false, "APPUSERNAME");
        public final static Property Statustype = new Property(15, Integer.class, "statustype", false, "STATUSTYPE");
    }


    public TransactionLogDao(DaoConfig config) {
        super(config);
    }
    
    public TransactionLogDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TRANSACTION_LOG\" (" + //
                "\"TRANSID\" INTEGER PRIMARY KEY NOT NULL UNIQUE ," + // 0: transid
                "\"APPID\" INTEGER NOT NULL ," + // 1: appid
                "\"USERID\" TEXT," + // 2: userid
                "\"APPUSER\" TEXT," + // 3: appuser
                "\"PLATFORM\" TEXT," + // 4: platform
                "\"DESCRIPTION\" TEXT," + // 5: description
                "\"PMCID\" INTEGER," + // 6: pmcid
                "\"REQDATE\" INTEGER," + // 7: reqdate
                "\"USERCHARGEAMT\" INTEGER," + // 8: userchargeamt
                "\"USERFEEAMT\" INTEGER," + // 9: userfeeamt
                "\"AMOUNT\" INTEGER," + // 10: amount
                "\"TYPE\" INTEGER," + // 11: type
                "\"SIGN\" INTEGER," + // 12: sign
                "\"USERNAME\" TEXT," + // 13: username
                "\"APPUSERNAME\" TEXT," + // 14: appusername
                "\"STATUSTYPE\" INTEGER);"); // 15: statustype
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TRANSACTION_LOG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TransactionLog entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.transid);
        stmt.bindLong(2, entity.appid);
 
        String userid = entity.userid;
        if (userid != null) {
            stmt.bindString(3, userid);
        }
 
        String appuser = entity.appuser;
        if (appuser != null) {
            stmt.bindString(4, appuser);
        }
 
        String platform = entity.platform;
        if (platform != null) {
            stmt.bindString(5, platform);
        }
 
        String description = entity.description;
        if (description != null) {
            stmt.bindString(6, description);
        }
 
        Integer pmcid = entity.pmcid;
        if (pmcid != null) {
            stmt.bindLong(7, pmcid);
        }
 
        Long reqdate = entity.reqdate;
        if (reqdate != null) {
            stmt.bindLong(8, reqdate);
        }
 
        Integer userchargeamt = entity.userchargeamt;
        if (userchargeamt != null) {
            stmt.bindLong(9, userchargeamt);
        }
 
        Integer userfeeamt = entity.userfeeamt;
        if (userfeeamt != null) {
            stmt.bindLong(10, userfeeamt);
        }
 
        Integer amount = entity.amount;
        if (amount != null) {
            stmt.bindLong(11, amount);
        }
 
        Integer type = entity.type;
        if (type != null) {
            stmt.bindLong(12, type);
        }
 
        Integer sign = entity.sign;
        if (sign != null) {
            stmt.bindLong(13, sign);
        }
 
        String username = entity.username;
        if (username != null) {
            stmt.bindString(14, username);
        }
 
        String appusername = entity.appusername;
        if (appusername != null) {
            stmt.bindString(15, appusername);
        }
 
        Integer statustype = entity.statustype;
        if (statustype != null) {
            stmt.bindLong(16, statustype);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TransactionLog entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.transid);
        stmt.bindLong(2, entity.appid);
 
        String userid = entity.userid;
        if (userid != null) {
            stmt.bindString(3, userid);
        }
 
        String appuser = entity.appuser;
        if (appuser != null) {
            stmt.bindString(4, appuser);
        }
 
        String platform = entity.platform;
        if (platform != null) {
            stmt.bindString(5, platform);
        }
 
        String description = entity.description;
        if (description != null) {
            stmt.bindString(6, description);
        }
 
        Integer pmcid = entity.pmcid;
        if (pmcid != null) {
            stmt.bindLong(7, pmcid);
        }
 
        Long reqdate = entity.reqdate;
        if (reqdate != null) {
            stmt.bindLong(8, reqdate);
        }
 
        Integer userchargeamt = entity.userchargeamt;
        if (userchargeamt != null) {
            stmt.bindLong(9, userchargeamt);
        }
 
        Integer userfeeamt = entity.userfeeamt;
        if (userfeeamt != null) {
            stmt.bindLong(10, userfeeamt);
        }
 
        Integer amount = entity.amount;
        if (amount != null) {
            stmt.bindLong(11, amount);
        }
 
        Integer type = entity.type;
        if (type != null) {
            stmt.bindLong(12, type);
        }
 
        Integer sign = entity.sign;
        if (sign != null) {
            stmt.bindLong(13, sign);
        }
 
        String username = entity.username;
        if (username != null) {
            stmt.bindString(14, username);
        }
 
        String appusername = entity.appusername;
        if (appusername != null) {
            stmt.bindString(15, appusername);
        }
 
        Integer statustype = entity.statustype;
        if (statustype != null) {
            stmt.bindLong(16, statustype);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public TransactionLog readEntity(Cursor cursor, int offset) {
        TransactionLog entity = new TransactionLog();
        readEntity(cursor, entity, offset);
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TransactionLog entity, int offset) {
        entity.transid = cursor.getLong(offset + 0);
        entity.appid = cursor.getLong(offset + 1);
        entity.userid = cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2);
        entity.appuser = cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3);
        entity.platform = cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4);
        entity.description = cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5);
        entity.pmcid = cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6);
        entity.reqdate = cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7);
        entity.userchargeamt = cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8);
        entity.userfeeamt = cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9);
        entity.amount = cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10);
        entity.type = cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11);
        entity.sign = cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12);
        entity.username = cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13);
        entity.appusername = cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14);
        entity.statustype = cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TransactionLog entity, long rowId) {
        entity.transid = rowId;
        return rowId;
    }
    
    @Override
    public Long getKey(TransactionLog entity) {
        if(entity != null) {
            return entity.transid;
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TransactionLog entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

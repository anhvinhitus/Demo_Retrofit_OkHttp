package vn.com.vng.zalopay.data.cache.model;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import vn.com.vng.zalopay.data.cache.model.ReceivePackageGD;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RECEIVE_PACKAGE_GD".
*/
public class ReceivePackageGDDao extends AbstractDao<ReceivePackageGD, Long> {

    public static final String TABLENAME = "RECEIVE_PACKAGE_GD";

    /**
     * Properties of entity ReceivePackageGD.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property PackageId = new Property(1, Long.class, "packageId", false, "PACKAGE_ID");
        public final static Property SendZaloPayID = new Property(2, String.class, "sendZaloPayID", false, "SEND_ZALO_PAY_ID");
        public final static Property SendFullName = new Property(3, String.class, "sendFullName", false, "SEND_FULL_NAME");
        public final static Property Amount = new Property(4, Long.class, "amount", false, "AMOUNT");
        public final static Property OpenedTime = new Property(5, Long.class, "openedTime", false, "OPENED_TIME");
    };

    private Query<ReceivePackageGD> receiveBundleGD_ReceivePackagesQuery;

    public ReceivePackageGDDao(DaoConfig config) {
        super(config);
    }
    
    public ReceivePackageGDDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RECEIVE_PACKAGE_GD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL UNIQUE ," + // 0: id
                "\"PACKAGE_ID\" INTEGER," + // 1: packageId
                "\"SEND_ZALO_PAY_ID\" TEXT," + // 2: sendZaloPayID
                "\"SEND_FULL_NAME\" TEXT," + // 3: sendFullName
                "\"AMOUNT\" INTEGER," + // 4: amount
                "\"OPENED_TIME\" INTEGER);"); // 5: openedTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RECEIVE_PACKAGE_GD\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ReceivePackageGD entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        Long packageId = entity.getPackageId();
        if (packageId != null) {
            stmt.bindLong(2, packageId);
        }
 
        String sendZaloPayID = entity.getSendZaloPayID();
        if (sendZaloPayID != null) {
            stmt.bindString(3, sendZaloPayID);
        }
 
        String sendFullName = entity.getSendFullName();
        if (sendFullName != null) {
            stmt.bindString(4, sendFullName);
        }
 
        Long amount = entity.getAmount();
        if (amount != null) {
            stmt.bindLong(5, amount);
        }
 
        Long openedTime = entity.getOpenedTime();
        if (openedTime != null) {
            stmt.bindLong(6, openedTime);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ReceivePackageGD readEntity(Cursor cursor, int offset) {
        ReceivePackageGD entity = new ReceivePackageGD( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // packageId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // sendZaloPayID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // sendFullName
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // amount
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5) // openedTime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ReceivePackageGD entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setPackageId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setSendZaloPayID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSendFullName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAmount(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setOpenedTime(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ReceivePackageGD entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ReceivePackageGD entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "receivePackages" to-many relationship of ReceiveBundleGD. */
    public List<ReceivePackageGD> _queryReceiveBundleGD_ReceivePackages(long id) {
        synchronized (this) {
            if (receiveBundleGD_ReceivePackagesQuery == null) {
                QueryBuilder<ReceivePackageGD> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Id.eq(null));
                queryBuilder.orderRaw("T.'OPENED_TIME' DESC");
                receiveBundleGD_ReceivePackagesQuery = queryBuilder.build();
            }
        }
        Query<ReceivePackageGD> query = receiveBundleGD_ReceivePackagesQuery.forCurrentThread();
        query.setParameter(0, id);
        return query.list();
    }

}

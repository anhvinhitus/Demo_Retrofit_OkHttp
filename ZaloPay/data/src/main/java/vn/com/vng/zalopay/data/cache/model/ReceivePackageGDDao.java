package vn.com.vng.zalopay.data.cache.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import vn.com.vng.zalopay.data.cache.model.ReceivePackageGD;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RECEIVE_PACKAGE_GD".
*/
public class ReceivePackageGDDao extends AbstractDao<ReceivePackageGD, Long> {

    public static final String TABLENAME = "RECEIVE_PACKAGE_GD";

    /**
     * Properties of entity ReceivePackageGD.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property BundleID = new Property(1, Long.class, "bundleID", false, "BUNDLE_ID");
        public final static Property ReceiverZaloPayID = new Property(2, String.class, "receiverZaloPayID", false, "RECEIVER_ZALO_PAY_ID");
        public final static Property SenderZaloPayID = new Property(3, String.class, "senderZaloPayID", false, "SENDER_ZALO_PAY_ID");
        public final static Property SenderFullName = new Property(4, String.class, "senderFullName", false, "SENDER_FULL_NAME");
        public final static Property SenderAvatar = new Property(5, String.class, "senderAvatar", false, "SENDER_AVATAR");
        public final static Property Amount = new Property(6, Long.class, "amount", false, "AMOUNT");
        public final static Property OpenedTime = new Property(7, Long.class, "openedTime", false, "OPENED_TIME");
        public final static Property Status = new Property(8, Integer.class, "status", false, "STATUS");
        public final static Property Message = new Property(9, String.class, "message", false, "MESSAGE");
        public final static Property IsLuckiest = new Property(10, Integer.class, "isLuckiest", false, "IS_LUCKIEST");
        public final static Property CreateTime = new Property(11, Long.class, "createTime", false, "CREATE_TIME");
    };

    private DaoSession daoSession;


    public ReceivePackageGDDao(DaoConfig config) {
        super(config);
    }
    
    public ReceivePackageGDDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RECEIVE_PACKAGE_GD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL UNIQUE ," + // 0: id
                "\"BUNDLE_ID\" INTEGER," + // 1: bundleID
                "\"RECEIVER_ZALO_PAY_ID\" TEXT," + // 2: receiverZaloPayID
                "\"SENDER_ZALO_PAY_ID\" TEXT," + // 3: senderZaloPayID
                "\"SENDER_FULL_NAME\" TEXT," + // 4: senderFullName
                "\"SENDER_AVATAR\" TEXT," + // 5: senderAvatar
                "\"AMOUNT\" INTEGER," + // 6: amount
                "\"OPENED_TIME\" INTEGER," + // 7: openedTime
                "\"STATUS\" INTEGER," + // 8: status
                "\"MESSAGE\" TEXT," + // 9: message
                "\"IS_LUCKIEST\" INTEGER," + // 10: isLuckiest
                "\"CREATE_TIME\" INTEGER);"); // 11: createTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RECEIVE_PACKAGE_GD\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ReceivePackageGD entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        Long bundleID = entity.getBundleID();
        if (bundleID != null) {
            stmt.bindLong(2, bundleID);
        }
 
        String receiverZaloPayID = entity.getReceiverZaloPayID();
        if (receiverZaloPayID != null) {
            stmt.bindString(3, receiverZaloPayID);
        }
 
        String senderZaloPayID = entity.getSenderZaloPayID();
        if (senderZaloPayID != null) {
            stmt.bindString(4, senderZaloPayID);
        }
 
        String senderFullName = entity.getSenderFullName();
        if (senderFullName != null) {
            stmt.bindString(5, senderFullName);
        }
 
        String senderAvatar = entity.getSenderAvatar();
        if (senderAvatar != null) {
            stmt.bindString(6, senderAvatar);
        }
 
        Long amount = entity.getAmount();
        if (amount != null) {
            stmt.bindLong(7, amount);
        }
 
        Long openedTime = entity.getOpenedTime();
        if (openedTime != null) {
            stmt.bindLong(8, openedTime);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(9, status);
        }
 
        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(10, message);
        }
 
        Integer isLuckiest = entity.getIsLuckiest();
        if (isLuckiest != null) {
            stmt.bindLong(11, isLuckiest);
        }
 
        Long createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(12, createTime);
        }
    }

    @Override
    protected void attachEntity(ReceivePackageGD entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ReceivePackageGD readEntity(Cursor cursor, int offset) {
        ReceivePackageGD entity = new ReceivePackageGD( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // bundleID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // receiverZaloPayID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // senderZaloPayID
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // senderFullName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // senderAvatar
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // amount
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // openedTime
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // status
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // message
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // isLuckiest
            cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11) // createTime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ReceivePackageGD entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setBundleID(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setReceiverZaloPayID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSenderZaloPayID(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSenderFullName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSenderAvatar(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAmount(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setOpenedTime(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setStatus(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setMessage(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setIsLuckiest(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setCreateTime(cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ReceivePackageGD entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ReceivePackageGD entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

package vn.com.vng.zalopay.data.cache.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import vn.com.vng.zalopay.data.cache.model.ReceivePacketSummaryDB;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RECEIVE_PACKET_SUMMARY_DB".
*/
public class ReceivePacketSummaryDBDao extends AbstractDao<ReceivePacketSummaryDB, Long> {

    public static final String TABLENAME = "RECEIVE_PACKET_SUMMARY_DB";

    /**
     * Properties of entity ReceivePacketSummaryDB.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TotalOfRevamount = new Property(1, Long.class, "totalOfRevamount", false, "TOTAL_OF_REVAMOUNT");
        public final static Property TotalOfRevPackage = new Property(2, Integer.class, "totalOfRevPackage", false, "TOTAL_OF_REV_PACKAGE");
        public final static Property TotalOfLuckiestDraw = new Property(3, Integer.class, "totalOfLuckiestDraw", false, "TOTAL_OF_LUCKIEST_DRAW");
        public final static Property TimeCreate = new Property(4, Long.class, "timeCreate", false, "TIME_CREATE");
    }


    public ReceivePacketSummaryDBDao(DaoConfig config) {
        super(config);
    }
    
    public ReceivePacketSummaryDBDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RECEIVE_PACKET_SUMMARY_DB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TOTAL_OF_REVAMOUNT\" INTEGER," + // 1: totalOfRevamount
                "\"TOTAL_OF_REV_PACKAGE\" INTEGER," + // 2: totalOfRevPackage
                "\"TOTAL_OF_LUCKIEST_DRAW\" INTEGER," + // 3: totalOfLuckiestDraw
                "\"TIME_CREATE\" INTEGER);"); // 4: timeCreate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RECEIVE_PACKET_SUMMARY_DB\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ReceivePacketSummaryDB entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long totalOfRevamount = entity.getTotalOfRevamount();
        if (totalOfRevamount != null) {
            stmt.bindLong(2, totalOfRevamount);
        }
 
        Integer totalOfRevPackage = entity.getTotalOfRevPackage();
        if (totalOfRevPackage != null) {
            stmt.bindLong(3, totalOfRevPackage);
        }
 
        Integer totalOfLuckiestDraw = entity.getTotalOfLuckiestDraw();
        if (totalOfLuckiestDraw != null) {
            stmt.bindLong(4, totalOfLuckiestDraw);
        }
 
        Long timeCreate = entity.getTimeCreate();
        if (timeCreate != null) {
            stmt.bindLong(5, timeCreate);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ReceivePacketSummaryDB readEntity(Cursor cursor, int offset) {
        ReceivePacketSummaryDB entity = new ReceivePacketSummaryDB( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // totalOfRevamount
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // totalOfRevPackage
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // totalOfLuckiestDraw
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4) // timeCreate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ReceivePacketSummaryDB entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTotalOfRevamount(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setTotalOfRevPackage(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setTotalOfLuckiestDraw(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setTimeCreate(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ReceivePacketSummaryDB entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ReceivePacketSummaryDB entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

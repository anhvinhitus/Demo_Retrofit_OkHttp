package vn.com.vng.zalopay.data.cache.model;

import android.database.sqlite.SQLiteDatabase;

import java.util.Map;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.AbstractDaoSession;
import de.greenrobot.dao.identityscope.IdentityScopeType;
import de.greenrobot.dao.internal.DaoConfig;

import vn.com.vng.zalopay.data.cache.model.AppResourceGD;
import vn.com.vng.zalopay.data.cache.model.PaymentTransTypeGD;
import vn.com.vng.zalopay.data.cache.model.TransactionLog;
import vn.com.vng.zalopay.data.cache.model.DataManifest;
import vn.com.vng.zalopay.data.cache.model.BankCardGD;
import vn.com.vng.zalopay.data.cache.model.ZaloFriendGD;
import vn.com.vng.zalopay.data.cache.model.TransferRecent;
import vn.com.vng.zalopay.data.cache.model.NotificationGD;
import vn.com.vng.zalopay.data.cache.model.PackageInBundleGD;
import vn.com.vng.zalopay.data.cache.model.SentBundleGD;
import vn.com.vng.zalopay.data.cache.model.ReceivePackageGD;

import vn.com.vng.zalopay.data.cache.model.AppResourceGDDao;
import vn.com.vng.zalopay.data.cache.model.PaymentTransTypeGDDao;
import vn.com.vng.zalopay.data.cache.model.TransactionLogDao;
import vn.com.vng.zalopay.data.cache.model.DataManifestDao;
import vn.com.vng.zalopay.data.cache.model.BankCardGDDao;
import vn.com.vng.zalopay.data.cache.model.ZaloFriendGDDao;
import vn.com.vng.zalopay.data.cache.model.TransferRecentDao;
import vn.com.vng.zalopay.data.cache.model.NotificationGDDao;
import vn.com.vng.zalopay.data.cache.model.PackageInBundleGDDao;
import vn.com.vng.zalopay.data.cache.model.SentBundleGDDao;
import vn.com.vng.zalopay.data.cache.model.ReceivePackageGDDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see de.greenrobot.dao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig appResourceGDDaoConfig;
    private final DaoConfig paymentTransTypeGDDaoConfig;
    private final DaoConfig transactionLogDaoConfig;
    private final DaoConfig dataManifestDaoConfig;
    private final DaoConfig bankCardGDDaoConfig;
    private final DaoConfig zaloFriendGDDaoConfig;
    private final DaoConfig transferRecentDaoConfig;
    private final DaoConfig notificationGDDaoConfig;
    private final DaoConfig packageInBundleGDDaoConfig;
    private final DaoConfig sentBundleGDDaoConfig;
    private final DaoConfig receivePackageGDDaoConfig;

    private final AppResourceGDDao appResourceGDDao;
    private final PaymentTransTypeGDDao paymentTransTypeGDDao;
    private final TransactionLogDao transactionLogDao;
    private final DataManifestDao dataManifestDao;
    private final BankCardGDDao bankCardGDDao;
    private final ZaloFriendGDDao zaloFriendGDDao;
    private final TransferRecentDao transferRecentDao;
    private final NotificationGDDao notificationGDDao;
    private final PackageInBundleGDDao packageInBundleGDDao;
    private final SentBundleGDDao sentBundleGDDao;
    private final ReceivePackageGDDao receivePackageGDDao;

    public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        appResourceGDDaoConfig = daoConfigMap.get(AppResourceGDDao.class).clone();
        appResourceGDDaoConfig.initIdentityScope(type);

        paymentTransTypeGDDaoConfig = daoConfigMap.get(PaymentTransTypeGDDao.class).clone();
        paymentTransTypeGDDaoConfig.initIdentityScope(type);

        transactionLogDaoConfig = daoConfigMap.get(TransactionLogDao.class).clone();
        transactionLogDaoConfig.initIdentityScope(type);

        dataManifestDaoConfig = daoConfigMap.get(DataManifestDao.class).clone();
        dataManifestDaoConfig.initIdentityScope(type);

        bankCardGDDaoConfig = daoConfigMap.get(BankCardGDDao.class).clone();
        bankCardGDDaoConfig.initIdentityScope(type);

        zaloFriendGDDaoConfig = daoConfigMap.get(ZaloFriendGDDao.class).clone();
        zaloFriendGDDaoConfig.initIdentityScope(type);

        transferRecentDaoConfig = daoConfigMap.get(TransferRecentDao.class).clone();
        transferRecentDaoConfig.initIdentityScope(type);

        notificationGDDaoConfig = daoConfigMap.get(NotificationGDDao.class).clone();
        notificationGDDaoConfig.initIdentityScope(type);

        packageInBundleGDDaoConfig = daoConfigMap.get(PackageInBundleGDDao.class).clone();
        packageInBundleGDDaoConfig.initIdentityScope(type);

        sentBundleGDDaoConfig = daoConfigMap.get(SentBundleGDDao.class).clone();
        sentBundleGDDaoConfig.initIdentityScope(type);

        receivePackageGDDaoConfig = daoConfigMap.get(ReceivePackageGDDao.class).clone();
        receivePackageGDDaoConfig.initIdentityScope(type);

        appResourceGDDao = new AppResourceGDDao(appResourceGDDaoConfig, this);
        paymentTransTypeGDDao = new PaymentTransTypeGDDao(paymentTransTypeGDDaoConfig, this);
        transactionLogDao = new TransactionLogDao(transactionLogDaoConfig, this);
        dataManifestDao = new DataManifestDao(dataManifestDaoConfig, this);
        bankCardGDDao = new BankCardGDDao(bankCardGDDaoConfig, this);
        zaloFriendGDDao = new ZaloFriendGDDao(zaloFriendGDDaoConfig, this);
        transferRecentDao = new TransferRecentDao(transferRecentDaoConfig, this);
        notificationGDDao = new NotificationGDDao(notificationGDDaoConfig, this);
        packageInBundleGDDao = new PackageInBundleGDDao(packageInBundleGDDaoConfig, this);
        sentBundleGDDao = new SentBundleGDDao(sentBundleGDDaoConfig, this);
        receivePackageGDDao = new ReceivePackageGDDao(receivePackageGDDaoConfig, this);

        registerDao(AppResourceGD.class, appResourceGDDao);
        registerDao(PaymentTransTypeGD.class, paymentTransTypeGDDao);
        registerDao(TransactionLog.class, transactionLogDao);
        registerDao(DataManifest.class, dataManifestDao);
        registerDao(BankCardGD.class, bankCardGDDao);
        registerDao(ZaloFriendGD.class, zaloFriendGDDao);
        registerDao(TransferRecent.class, transferRecentDao);
        registerDao(NotificationGD.class, notificationGDDao);
        registerDao(PackageInBundleGD.class, packageInBundleGDDao);
        registerDao(SentBundleGD.class, sentBundleGDDao);
        registerDao(ReceivePackageGD.class, receivePackageGDDao);
    }
    
    public void clear() {
        appResourceGDDaoConfig.getIdentityScope().clear();
        paymentTransTypeGDDaoConfig.getIdentityScope().clear();
        transactionLogDaoConfig.getIdentityScope().clear();
        dataManifestDaoConfig.getIdentityScope().clear();
        bankCardGDDaoConfig.getIdentityScope().clear();
        zaloFriendGDDaoConfig.getIdentityScope().clear();
        transferRecentDaoConfig.getIdentityScope().clear();
        notificationGDDaoConfig.getIdentityScope().clear();
        packageInBundleGDDaoConfig.getIdentityScope().clear();
        sentBundleGDDaoConfig.getIdentityScope().clear();
        receivePackageGDDaoConfig.getIdentityScope().clear();
    }

    public AppResourceGDDao getAppResourceGDDao() {
        return appResourceGDDao;
    }

    public PaymentTransTypeGDDao getPaymentTransTypeGDDao() {
        return paymentTransTypeGDDao;
    }

    public TransactionLogDao getTransactionLogDao() {
        return transactionLogDao;
    }

    public DataManifestDao getDataManifestDao() {
        return dataManifestDao;
    }

    public BankCardGDDao getBankCardGDDao() {
        return bankCardGDDao;
    }

    public ZaloFriendGDDao getZaloFriendGDDao() {
        return zaloFriendGDDao;
    }

    public TransferRecentDao getTransferRecentDao() {
        return transferRecentDao;
    }

    public NotificationGDDao getNotificationGDDao() {
        return notificationGDDao;
    }

    public PackageInBundleGDDao getPackageInBundleGDDao() {
        return packageInBundleGDDao;
    }

    public SentBundleGDDao getSentBundleGDDao() {
        return sentBundleGDDao;
    }

    public ReceivePackageGDDao getReceivePackageGDDao() {
        return receivePackageGDDao;
    }

}

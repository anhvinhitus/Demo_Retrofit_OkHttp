package vn.com.vng.zalopay.data.cache.model;

import java.util.List;
import vn.com.vng.zalopay.data.cache.model.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "RECEIVE_BUNDLE_GD".
 */
public class ReceiveBundleGD {

    private long id;
    private Integer type;
    private Long createTime;
    private Integer totalLuck;
    private Integer numOfOpenedPakages;
    private Integer numOfPackages;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ReceiveBundleGDDao myDao;

    private List<ReceivePackageGD> receivePackages;

    public ReceiveBundleGD() {
    }

    public ReceiveBundleGD(long id) {
        this.id = id;
    }

    public ReceiveBundleGD(long id, Integer type, Long createTime, Integer totalLuck, Integer numOfOpenedPakages, Integer numOfPackages) {
        this.id = id;
        this.type = type;
        this.createTime = createTime;
        this.totalLuck = totalLuck;
        this.numOfOpenedPakages = numOfOpenedPakages;
        this.numOfPackages = numOfPackages;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getReceiveBundleGDDao() : null;
    }

    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }

    public Integer getType() {
        return type;
    }

    public void setType(Integer type) {
        this.type = type;
    }

    public Long getCreateTime() {
        return createTime;
    }

    public void setCreateTime(Long createTime) {
        this.createTime = createTime;
    }

    public Integer getTotalLuck() {
        return totalLuck;
    }

    public void setTotalLuck(Integer totalLuck) {
        this.totalLuck = totalLuck;
    }

    public Integer getNumOfOpenedPakages() {
        return numOfOpenedPakages;
    }

    public void setNumOfOpenedPakages(Integer numOfOpenedPakages) {
        this.numOfOpenedPakages = numOfOpenedPakages;
    }

    public Integer getNumOfPackages() {
        return numOfPackages;
    }

    public void setNumOfPackages(Integer numOfPackages) {
        this.numOfPackages = numOfPackages;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<ReceivePackageGD> getReceivePackages() {
        if (receivePackages == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ReceivePackageGDDao targetDao = daoSession.getReceivePackageGDDao();
            List<ReceivePackageGD> receivePackagesNew = targetDao._queryReceiveBundleGD_ReceivePackages(id);
            synchronized (this) {
                if(receivePackages == null) {
                    receivePackages = receivePackagesNew;
                }
            }
        }
        return receivePackages;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetReceivePackages() {
        receivePackages = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}

package vn.com.vng.zalopay.data.cache.model;

import org.greenrobot.greendao.annotation.*;

import vn.com.vng.zalopay.data.cache.model.DaoSession;
import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.

/**
 * Entity mapped to table "ZALO_PAY_PROFILE_GD".
 */
@Entity(active = true)
public class ZaloPayProfileGD {

    @NotNull
    @Unique
    public String zaloPayId;
    public Long status;
    public String zaloPayName;

    @Id
    public long zaloId;
    public Long phoneNumber;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient ZaloPayProfileGDDao myDao;

    @ToOne(joinProperty = "zaloId")
    private ZaloFriendGD zaloInfo;

    @Generated
    private transient Long zaloInfo__resolvedKey;

    @ToOne(joinProperty = "phoneNumber")
    private ContactGD contact;

    @Generated
    private transient Long contact__resolvedKey;


    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getZaloPayProfileGDDao() : null;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public ZaloFriendGD getZaloInfo() {
        long __key = this.zaloId;
        if (zaloInfo__resolvedKey == null || !zaloInfo__resolvedKey.equals(__key)) {
            __throwIfDetached();
            ZaloFriendGDDao targetDao = daoSession.getZaloFriendGDDao();
            ZaloFriendGD zaloInfoNew = targetDao.load(__key);
            synchronized (this) {
                zaloInfo = zaloInfoNew;
            	zaloInfo__resolvedKey = __key;
            }
        }
        return zaloInfo;
    }

    @Generated
    public void setZaloInfo(ZaloFriendGD zaloInfo) {
        if (zaloInfo == null) {
            throw new DaoException("To-one property 'zaloId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.zaloInfo = zaloInfo;
            zaloId = zaloInfo.zaloId;
            zaloInfo__resolvedKey = zaloId;
        }
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public ContactGD getContact() {
        Long __key = this.phoneNumber;
        if (contact__resolvedKey == null || !contact__resolvedKey.equals(__key)) {
            __throwIfDetached();
            ContactGDDao targetDao = daoSession.getContactGDDao();
            ContactGD contactNew = targetDao.load(__key);
            synchronized (this) {
                contact = contactNew;
            	contact__resolvedKey = __key;
            }
        }
        return contact;
    }

    @Generated
    public void setContact(ContactGD contact) {
        synchronized (this) {
            this.contact = contact;
            phoneNumber = contact == null ? null : contact.phoneNumber;
            contact__resolvedKey = phoneNumber;
        }
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

}

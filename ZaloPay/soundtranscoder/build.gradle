apply plugin: 'com.android.library'
def cfg = rootProject.ext.configuration

android {
    compileSdkVersion cfg.compileVersion
    buildToolsVersion cfg.buildToolsVersion

    defaultConfig {
        minSdkVersion cfg.minSdk
        targetSdkVersion cfg.targetSdk
        versionCode 1
        versionName "1.0"

        /*
         * native build settings: taking default for almost everything
         */
        ndk {
            moduleName = 'transcoder'
//        toolchain = 'clang'
//        CFlags.addAll(['-Wall'])
//            abiFilters = ["armeabi-v7a", "armeabi", "arm64-v8a", "x86", "x86-64"]
//            abiFilters = ["armeabi-v7a", "armeabi", "arm64-v8a", "x86-64"]
            ldLibs = ["android", "log"]
            stl = "gnustl_static"
        }
        // We need to set the libs dir for the output and the srcdirs to null to
        // prevent the gradle ndk hooks from firing.  We need to depend on Android.mk
        // NOTE: this appears to break the android studio 'android' project view
        // (at least, it hides the jni directory…)
        sourceSets.main {
            //Tell Gradle where to put the compiled library
            // jniLibs.srcDir 'src/main/libs'

            //hide the ‘jni’ folder so that the automatic gradle build doesn’t try to run
            //it’s own ndk-build process
            jni.srcDirs = ['src/main/jni'];
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    def libs = rootProject.ext.libraries
    def tests = rootProject.ext.testingLibraries

    testCompile tests.junit
    compile libs.support_support_v4
    compile libs.timber
}

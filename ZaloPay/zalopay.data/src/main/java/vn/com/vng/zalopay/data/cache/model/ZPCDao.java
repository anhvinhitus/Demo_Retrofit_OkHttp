package vn.com.vng.zalopay.data.cache.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ZPC".
*/
public class ZPCDao extends AbstractDao<ZPC, Long> {

    public static final String TABLENAME = "ZPC";

    /**
     * Properties of entity ZPC.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ZaloId = new Property(1, long.class, "zaloId", false, "ZALO_ID");
        public final static Property ZalopayId = new Property(2, long.class, "zalopayId", false, "ZALOPAY_ID");
        public final static Property PhoneNumber = new Property(3, String.class, "phoneNumber", false, "PHONE_NUMBER");
        public final static Property ZalopayName = new Property(4, String.class, "zalopayName", false, "ZALOPAY_NAME");
        public final static Property Avatar = new Property(5, String.class, "avatar", false, "AVATAR");
        public final static Property DisplayName = new Property(6, String.class, "displayName", false, "DISPLAY_NAME");
        public final static Property NormalizeDisplayName = new Property(7, String.class, "normalizeDisplayName", false, "NORMALIZE_DISPLAY_NAME");
        public final static Property Status = new Property(8, long.class, "status", false, "STATUS");
    }


    public ZPCDao(DaoConfig config) {
        super(config);
    }
    
    public ZPCDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ZPC\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ZALO_ID\" INTEGER NOT NULL UNIQUE ," + // 1: zaloId
                "\"ZALOPAY_ID\" INTEGER NOT NULL UNIQUE ," + // 2: zalopayId
                "\"PHONE_NUMBER\" TEXT UNIQUE ," + // 3: phoneNumber
                "\"ZALOPAY_NAME\" TEXT UNIQUE ," + // 4: zalopayName
                "\"AVATAR\" TEXT," + // 5: avatar
                "\"DISPLAY_NAME\" TEXT," + // 6: displayName
                "\"NORMALIZE_DISPLAY_NAME\" TEXT," + // 7: normalizeDisplayName
                "\"STATUS\" INTEGER NOT NULL );"); // 8: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ZPC\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ZPC entity) {
        stmt.clearBindings();
 
        Long id = entity.id;
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.zaloId);
        stmt.bindLong(3, entity.zalopayId);
 
        String phoneNumber = entity.phoneNumber;
        if (phoneNumber != null) {
            stmt.bindString(4, phoneNumber);
        }
 
        String zalopayName = entity.zalopayName;
        if (zalopayName != null) {
            stmt.bindString(5, zalopayName);
        }
 
        String avatar = entity.avatar;
        if (avatar != null) {
            stmt.bindString(6, avatar);
        }
 
        String displayName = entity.displayName;
        if (displayName != null) {
            stmt.bindString(7, displayName);
        }
 
        String normalizeDisplayName = entity.normalizeDisplayName;
        if (normalizeDisplayName != null) {
            stmt.bindString(8, normalizeDisplayName);
        }
        stmt.bindLong(9, entity.status);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ZPC entity) {
        stmt.clearBindings();
 
        Long id = entity.id;
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.zaloId);
        stmt.bindLong(3, entity.zalopayId);
 
        String phoneNumber = entity.phoneNumber;
        if (phoneNumber != null) {
            stmt.bindString(4, phoneNumber);
        }
 
        String zalopayName = entity.zalopayName;
        if (zalopayName != null) {
            stmt.bindString(5, zalopayName);
        }
 
        String avatar = entity.avatar;
        if (avatar != null) {
            stmt.bindString(6, avatar);
        }
 
        String displayName = entity.displayName;
        if (displayName != null) {
            stmt.bindString(7, displayName);
        }
 
        String normalizeDisplayName = entity.normalizeDisplayName;
        if (normalizeDisplayName != null) {
            stmt.bindString(8, normalizeDisplayName);
        }
        stmt.bindLong(9, entity.status);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ZPC readEntity(Cursor cursor, int offset) {
        ZPC entity = new ZPC();
        readEntity(cursor, entity, offset);
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ZPC entity, int offset) {
        entity.id = cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
        entity.zaloId = cursor.getLong(offset + 1);
        entity.zalopayId = cursor.getLong(offset + 2);
        entity.phoneNumber = cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3);
        entity.zalopayName = cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4);
        entity.avatar = cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5);
        entity.displayName = cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6);
        entity.normalizeDisplayName = cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7);
        entity.status = cursor.getLong(offset + 8);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ZPC entity, long rowId) {
        entity.id = rowId;
        return rowId;
    }
    
    @Override
    public Long getKey(ZPC entity) {
        if(entity != null) {
            return entity.id;
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ZPC entity) {
        return entity.id != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

package vn.com.vng.zalopay.data.cache.global;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GOOGLE_ANALYTICS".
*/
public class GoogleAnalyticsDao extends AbstractDao<GoogleAnalytics, Long> {

    public static final String TABLENAME = "GOOGLE_ANALYTICS";

    /**
     * Properties of entity GoogleAnalytics.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Type = new Property(1, String.class, "type", false, "TYPE");
        public final static Property Payload = new Property(2, String.class, "payload", false, "PAYLOAD");
        public final static Property Timestamp = new Property(3, long.class, "timestamp", false, "TIMESTAMP");
    }


    public GoogleAnalyticsDao(DaoConfig config) {
        super(config);
    }
    
    public GoogleAnalyticsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GOOGLE_ANALYTICS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TYPE\" TEXT NOT NULL ," + // 1: type
                "\"PAYLOAD\" TEXT NOT NULL ," + // 2: payload
                "\"TIMESTAMP\" INTEGER NOT NULL );"); // 3: timestamp
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GOOGLE_ANALYTICS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GoogleAnalytics entity) {
        stmt.clearBindings();
 
        Long id = entity.id;
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.type);
        stmt.bindString(3, entity.payload);
        stmt.bindLong(4, entity.timestamp);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GoogleAnalytics entity) {
        stmt.clearBindings();
 
        Long id = entity.id;
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.type);
        stmt.bindString(3, entity.payload);
        stmt.bindLong(4, entity.timestamp);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public GoogleAnalytics readEntity(Cursor cursor, int offset) {
        GoogleAnalytics entity = new GoogleAnalytics();
        readEntity(cursor, entity, offset);
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GoogleAnalytics entity, int offset) {
        entity.id = cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
        entity.type = cursor.getString(offset + 1);
        entity.payload = cursor.getString(offset + 2);
        entity.timestamp = cursor.getLong(offset + 3);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(GoogleAnalytics entity, long rowId) {
        entity.id = rowId;
        return rowId;
    }
    
    @Override
    public Long getKey(GoogleAnalytics entity) {
        if(entity != null) {
            return entity.id;
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GoogleAnalytics entity) {
        return entity.id != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

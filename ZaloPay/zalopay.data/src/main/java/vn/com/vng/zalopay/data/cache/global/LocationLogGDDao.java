package vn.com.vng.zalopay.data.cache.global;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOCATION_LOG_GD".
*/
public class LocationLogGDDao extends AbstractDao<LocationLogGD, Long> {

    public static final String TABLENAME = "LOCATION_LOG_GD";

    /**
     * Properties of entity LocationLogGD.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Timeget = new Property(0, long.class, "timeget", true, "TIMEGET");
        public final static Property Latitude = new Property(1, Double.class, "latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(2, Double.class, "longitude", false, "LONGITUDE");
        public final static Property Address = new Property(3, String.class, "address", false, "ADDRESS");
    }


    public LocationLogGDDao(DaoConfig config) {
        super(config);
    }
    
    public LocationLogGDDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOCATION_LOG_GD\" (" + //
                "\"TIMEGET\" INTEGER PRIMARY KEY NOT NULL UNIQUE ," + // 0: timeget
                "\"LATITUDE\" REAL," + // 1: latitude
                "\"LONGITUDE\" REAL," + // 2: longitude
                "\"ADDRESS\" TEXT);"); // 3: address
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOCATION_LOG_GD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LocationLogGD entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.timeget);
 
        Double latitude = entity.latitude;
        if (latitude != null) {
            stmt.bindDouble(2, latitude);
        }
 
        Double longitude = entity.longitude;
        if (longitude != null) {
            stmt.bindDouble(3, longitude);
        }
 
        String address = entity.address;
        if (address != null) {
            stmt.bindString(4, address);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LocationLogGD entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.timeget);
 
        Double latitude = entity.latitude;
        if (latitude != null) {
            stmt.bindDouble(2, latitude);
        }
 
        Double longitude = entity.longitude;
        if (longitude != null) {
            stmt.bindDouble(3, longitude);
        }
 
        String address = entity.address;
        if (address != null) {
            stmt.bindString(4, address);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public LocationLogGD readEntity(Cursor cursor, int offset) {
        LocationLogGD entity = new LocationLogGD();
        readEntity(cursor, entity, offset);
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LocationLogGD entity, int offset) {
        entity.timeget = cursor.getLong(offset + 0);
        entity.latitude = cursor.isNull(offset + 1) ? null : cursor.getDouble(offset + 1);
        entity.longitude = cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2);
        entity.address = cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LocationLogGD entity, long rowId) {
        entity.timeget = rowId;
        return rowId;
    }
    
    @Override
    public Long getKey(LocationLogGD entity) {
        if(entity != null) {
            return entity.timeget;
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LocationLogGD entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

package vn.com.vng.zalopay.data.cache.global;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "APPTRANSID_LOG_API_CALL_GD".
*/
public class ApptransidLogApiCallGDDao extends AbstractDao<ApptransidLogApiCallGD, Long> {

    public static final String TABLENAME = "APPTRANSID_LOG_API_CALL_GD";

    /**
     * Properties of entity ApptransidLogApiCallGD.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Apptransid = new Property(1, String.class, "apptransid", false, "APPTRANSID");
        public final static Property Apiid = new Property(2, Long.class, "apiid", false, "APIID");
        public final static Property Timebegin = new Property(3, Long.class, "timebegin", false, "TIMEBEGIN");
        public final static Property Timeend = new Property(4, Long.class, "timeend", false, "TIMEEND");
        public final static Property Returncode = new Property(5, Integer.class, "returncode", false, "RETURNCODE");
    }


    public ApptransidLogApiCallGDDao(DaoConfig config) {
        super(config);
    }
    
    public ApptransidLogApiCallGDDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"APPTRANSID_LOG_API_CALL_GD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"APPTRANSID\" TEXT," + // 1: apptransid
                "\"APIID\" INTEGER," + // 2: apiid
                "\"TIMEBEGIN\" INTEGER," + // 3: timebegin
                "\"TIMEEND\" INTEGER," + // 4: timeend
                "\"RETURNCODE\" INTEGER);"); // 5: returncode
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"APPTRANSID_LOG_API_CALL_GD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ApptransidLogApiCallGD entity) {
        stmt.clearBindings();
 
        Long id = entity.id;
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String apptransid = entity.apptransid;
        if (apptransid != null) {
            stmt.bindString(2, apptransid);
        }
 
        Long apiid = entity.apiid;
        if (apiid != null) {
            stmt.bindLong(3, apiid);
        }
 
        Long timebegin = entity.timebegin;
        if (timebegin != null) {
            stmt.bindLong(4, timebegin);
        }
 
        Long timeend = entity.timeend;
        if (timeend != null) {
            stmt.bindLong(5, timeend);
        }
 
        Integer returncode = entity.returncode;
        if (returncode != null) {
            stmt.bindLong(6, returncode);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ApptransidLogApiCallGD entity) {
        stmt.clearBindings();
 
        Long id = entity.id;
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String apptransid = entity.apptransid;
        if (apptransid != null) {
            stmt.bindString(2, apptransid);
        }
 
        Long apiid = entity.apiid;
        if (apiid != null) {
            stmt.bindLong(3, apiid);
        }
 
        Long timebegin = entity.timebegin;
        if (timebegin != null) {
            stmt.bindLong(4, timebegin);
        }
 
        Long timeend = entity.timeend;
        if (timeend != null) {
            stmt.bindLong(5, timeend);
        }
 
        Integer returncode = entity.returncode;
        if (returncode != null) {
            stmt.bindLong(6, returncode);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ApptransidLogApiCallGD readEntity(Cursor cursor, int offset) {
        ApptransidLogApiCallGD entity = new ApptransidLogApiCallGD();
        readEntity(cursor, entity, offset);
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ApptransidLogApiCallGD entity, int offset) {
        entity.id = cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
        entity.apptransid = cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1);
        entity.apiid = cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2);
        entity.timebegin = cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3);
        entity.timeend = cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4);
        entity.returncode = cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ApptransidLogApiCallGD entity, long rowId) {
        entity.id = rowId;
        return rowId;
    }
    
    @Override
    public Long getKey(ApptransidLogApiCallGD entity) {
        if(entity != null) {
            return entity.id;
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ApptransidLogApiCallGD entity) {
        return entity.id != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

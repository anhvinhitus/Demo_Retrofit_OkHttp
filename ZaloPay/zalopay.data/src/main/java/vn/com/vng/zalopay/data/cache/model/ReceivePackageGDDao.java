package vn.com.vng.zalopay.data.cache.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RECEIVE_PACKAGE_GD".
*/
public class ReceivePackageGDDao extends AbstractDao<ReceivePackageGD, Long> {

    public static final String TABLENAME = "RECEIVE_PACKAGE_GD";

    /**
     * Properties of entity ReceivePackageGD.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property BundleID = new Property(1, Long.class, "bundleID", false, "BUNDLE_ID");
        public final static Property ReceiverZaloPayID = new Property(2, String.class, "receiverZaloPayID", false, "RECEIVER_ZALO_PAY_ID");
        public final static Property SenderZaloPayID = new Property(3, String.class, "senderZaloPayID", false, "SENDER_ZALO_PAY_ID");
        public final static Property SenderFullName = new Property(4, String.class, "senderFullName", false, "SENDER_FULL_NAME");
        public final static Property SenderAvatar = new Property(5, String.class, "senderAvatar", false, "SENDER_AVATAR");
        public final static Property Amount = new Property(6, Long.class, "amount", false, "AMOUNT");
        public final static Property OpenedTime = new Property(7, Long.class, "openedTime", false, "OPENED_TIME");
        public final static Property Status = new Property(8, Long.class, "status", false, "STATUS");
        public final static Property MessageStatus = new Property(9, String.class, "messageStatus", false, "MESSAGE_STATUS");
        public final static Property Message = new Property(10, String.class, "message", false, "MESSAGE");
        public final static Property IsLuckiest = new Property(11, Long.class, "isLuckiest", false, "IS_LUCKIEST");
        public final static Property CreateTime = new Property(12, Long.class, "createTime", false, "CREATE_TIME");
    }

    private DaoSession daoSession;


    public ReceivePackageGDDao(DaoConfig config) {
        super(config);
    }
    
    public ReceivePackageGDDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RECEIVE_PACKAGE_GD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL UNIQUE ," + // 0: id
                "\"BUNDLE_ID\" INTEGER," + // 1: bundleID
                "\"RECEIVER_ZALO_PAY_ID\" TEXT," + // 2: receiverZaloPayID
                "\"SENDER_ZALO_PAY_ID\" TEXT," + // 3: senderZaloPayID
                "\"SENDER_FULL_NAME\" TEXT," + // 4: senderFullName
                "\"SENDER_AVATAR\" TEXT," + // 5: senderAvatar
                "\"AMOUNT\" INTEGER," + // 6: amount
                "\"OPENED_TIME\" INTEGER," + // 7: openedTime
                "\"STATUS\" INTEGER," + // 8: status
                "\"MESSAGE_STATUS\" TEXT," + // 9: messageStatus
                "\"MESSAGE\" TEXT," + // 10: message
                "\"IS_LUCKIEST\" INTEGER," + // 11: isLuckiest
                "\"CREATE_TIME\" INTEGER);"); // 12: createTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RECEIVE_PACKAGE_GD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ReceivePackageGD entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.id);
 
        Long bundleID = entity.bundleID;
        if (bundleID != null) {
            stmt.bindLong(2, bundleID);
        }
 
        String receiverZaloPayID = entity.receiverZaloPayID;
        if (receiverZaloPayID != null) {
            stmt.bindString(3, receiverZaloPayID);
        }
 
        String senderZaloPayID = entity.senderZaloPayID;
        if (senderZaloPayID != null) {
            stmt.bindString(4, senderZaloPayID);
        }
 
        String senderFullName = entity.senderFullName;
        if (senderFullName != null) {
            stmt.bindString(5, senderFullName);
        }
 
        String senderAvatar = entity.senderAvatar;
        if (senderAvatar != null) {
            stmt.bindString(6, senderAvatar);
        }
 
        Long amount = entity.amount;
        if (amount != null) {
            stmt.bindLong(7, amount);
        }
 
        Long openedTime = entity.openedTime;
        if (openedTime != null) {
            stmt.bindLong(8, openedTime);
        }
 
        Long status = entity.status;
        if (status != null) {
            stmt.bindLong(9, status);
        }
 
        String messageStatus = entity.messageStatus;
        if (messageStatus != null) {
            stmt.bindString(10, messageStatus);
        }
 
        String message = entity.message;
        if (message != null) {
            stmt.bindString(11, message);
        }
 
        Long isLuckiest = entity.isLuckiest;
        if (isLuckiest != null) {
            stmt.bindLong(12, isLuckiest);
        }
 
        Long createTime = entity.createTime;
        if (createTime != null) {
            stmt.bindLong(13, createTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ReceivePackageGD entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.id);
 
        Long bundleID = entity.bundleID;
        if (bundleID != null) {
            stmt.bindLong(2, bundleID);
        }
 
        String receiverZaloPayID = entity.receiverZaloPayID;
        if (receiverZaloPayID != null) {
            stmt.bindString(3, receiverZaloPayID);
        }
 
        String senderZaloPayID = entity.senderZaloPayID;
        if (senderZaloPayID != null) {
            stmt.bindString(4, senderZaloPayID);
        }
 
        String senderFullName = entity.senderFullName;
        if (senderFullName != null) {
            stmt.bindString(5, senderFullName);
        }
 
        String senderAvatar = entity.senderAvatar;
        if (senderAvatar != null) {
            stmt.bindString(6, senderAvatar);
        }
 
        Long amount = entity.amount;
        if (amount != null) {
            stmt.bindLong(7, amount);
        }
 
        Long openedTime = entity.openedTime;
        if (openedTime != null) {
            stmt.bindLong(8, openedTime);
        }
 
        Long status = entity.status;
        if (status != null) {
            stmt.bindLong(9, status);
        }
 
        String messageStatus = entity.messageStatus;
        if (messageStatus != null) {
            stmt.bindString(10, messageStatus);
        }
 
        String message = entity.message;
        if (message != null) {
            stmt.bindString(11, message);
        }
 
        Long isLuckiest = entity.isLuckiest;
        if (isLuckiest != null) {
            stmt.bindLong(12, isLuckiest);
        }
 
        Long createTime = entity.createTime;
        if (createTime != null) {
            stmt.bindLong(13, createTime);
        }
    }

    @Override
    protected final void attachEntity(ReceivePackageGD entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public ReceivePackageGD readEntity(Cursor cursor, int offset) {
        ReceivePackageGD entity = new ReceivePackageGD();
        readEntity(cursor, entity, offset);
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ReceivePackageGD entity, int offset) {
        entity.id = cursor.getLong(offset + 0);
        entity.bundleID = cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1);
        entity.receiverZaloPayID = cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2);
        entity.senderZaloPayID = cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3);
        entity.senderFullName = cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4);
        entity.senderAvatar = cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5);
        entity.amount = cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6);
        entity.openedTime = cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7);
        entity.status = cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8);
        entity.messageStatus = cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9);
        entity.message = cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10);
        entity.isLuckiest = cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11);
        entity.createTime = cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ReceivePackageGD entity, long rowId) {
        entity.id = rowId;
        return rowId;
    }
    
    @Override
    public Long getKey(ReceivePackageGD entity) {
        if(entity != null) {
            return entity.id;
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ReceivePackageGD entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

package vn.com.vng.zalopay.data.cache.model;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ZALO_PAY_PROFILE_GD".
*/
public class ZaloPayProfileGDDao extends AbstractDao<ZaloPayProfileGD, Long> {

    public static final String TABLENAME = "ZALO_PAY_PROFILE_GD";

    /**
     * Properties of entity ZaloPayProfileGD.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ZaloPayId = new Property(0, String.class, "zaloPayId", false, "ZALO_PAY_ID");
        public final static Property Status = new Property(1, Long.class, "status", false, "STATUS");
        public final static Property ZaloPayName = new Property(2, String.class, "zaloPayName", false, "ZALO_PAY_NAME");
        public final static Property Avatar = new Property(3, String.class, "avatar", false, "AVATAR");
        public final static Property DisplayName = new Property(4, String.class, "displayName", false, "DISPLAY_NAME");
        public final static Property ZaloId = new Property(5, long.class, "zaloId", true, "ZALO_ID");
        public final static Property PhoneNumber = new Property(6, Long.class, "phoneNumber", false, "PHONE_NUMBER");
    }

    private DaoSession daoSession;


    public ZaloPayProfileGDDao(DaoConfig config) {
        super(config);
    }
    
    public ZaloPayProfileGDDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ZALO_PAY_PROFILE_GD\" (" + //
                "\"ZALO_PAY_ID\" TEXT NOT NULL UNIQUE ," + // 0: zaloPayId
                "\"STATUS\" INTEGER," + // 1: status
                "\"ZALO_PAY_NAME\" TEXT," + // 2: zaloPayName
                "\"AVATAR\" TEXT," + // 3: avatar
                "\"DISPLAY_NAME\" TEXT," + // 4: displayName
                "\"ZALO_ID\" INTEGER PRIMARY KEY NOT NULL ," + // 5: zaloId
                "\"PHONE_NUMBER\" INTEGER);"); // 6: phoneNumber
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ZALO_PAY_PROFILE_GD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ZaloPayProfileGD entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.zaloPayId);
 
        Long status = entity.status;
        if (status != null) {
            stmt.bindLong(2, status);
        }
 
        String zaloPayName = entity.zaloPayName;
        if (zaloPayName != null) {
            stmt.bindString(3, zaloPayName);
        }
 
        String avatar = entity.avatar;
        if (avatar != null) {
            stmt.bindString(4, avatar);
        }
 
        String displayName = entity.displayName;
        if (displayName != null) {
            stmt.bindString(5, displayName);
        }
        stmt.bindLong(6, entity.zaloId);
 
        Long phoneNumber = entity.phoneNumber;
        if (phoneNumber != null) {
            stmt.bindLong(7, phoneNumber);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ZaloPayProfileGD entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.zaloPayId);
 
        Long status = entity.status;
        if (status != null) {
            stmt.bindLong(2, status);
        }
 
        String zaloPayName = entity.zaloPayName;
        if (zaloPayName != null) {
            stmt.bindString(3, zaloPayName);
        }
 
        String avatar = entity.avatar;
        if (avatar != null) {
            stmt.bindString(4, avatar);
        }
 
        String displayName = entity.displayName;
        if (displayName != null) {
            stmt.bindString(5, displayName);
        }
        stmt.bindLong(6, entity.zaloId);
 
        Long phoneNumber = entity.phoneNumber;
        if (phoneNumber != null) {
            stmt.bindLong(7, phoneNumber);
        }
    }

    @Override
    protected final void attachEntity(ZaloPayProfileGD entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 5);
    }    

    @Override
    public ZaloPayProfileGD readEntity(Cursor cursor, int offset) {
        ZaloPayProfileGD entity = new ZaloPayProfileGD();
        readEntity(cursor, entity, offset);
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ZaloPayProfileGD entity, int offset) {
        entity.zaloPayId = cursor.getString(offset + 0);
        entity.status = cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1);
        entity.zaloPayName = cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2);
        entity.avatar = cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3);
        entity.displayName = cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4);
        entity.zaloId = cursor.getLong(offset + 5);
        entity.phoneNumber = cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ZaloPayProfileGD entity, long rowId) {
        entity.zaloId = rowId;
        return rowId;
    }
    
    @Override
    public Long getKey(ZaloPayProfileGD entity) {
        if(entity != null) {
            return entity.zaloId;
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ZaloPayProfileGD entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getZaloProfileGDDao().getAllColumns());
            builder.append(" FROM ZALO_PAY_PROFILE_GD T");
            builder.append(" LEFT JOIN ZALO_PROFILE_GD T0 ON T.\"ZALO_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected ZaloPayProfileGD loadCurrentDeep(Cursor cursor, boolean lock) {
        ZaloPayProfileGD entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        ZaloProfileGD zaloInfo = loadCurrentOther(daoSession.getZaloProfileGDDao(), cursor, offset);
         if(zaloInfo != null) {
            entity.setZaloInfo(zaloInfo);
        }

        return entity;    
    }

    public ZaloPayProfileGD loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<ZaloPayProfileGD> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<ZaloPayProfileGD> list = new ArrayList<ZaloPayProfileGD>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<ZaloPayProfileGD> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<ZaloPayProfileGD> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}

package vn.com.vng.zalopay.data.cache.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FAVORITE_ZPC".
*/
public class FavoriteZPCDao extends AbstractDao<FavoriteZPC, Void> {

    public static final String TABLENAME = "FAVORITE_ZPC";

    /**
     * Properties of entity FavoriteZPC.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property PhoneNumber = new Property(0, String.class, "phoneNumber", false, "PHONE_NUMBER");
        public final static Property ZaloId = new Property(1, long.class, "zaloId", false, "ZALO_ID");
        public final static Property CreateTime = new Property(2, long.class, "createTime", false, "CREATE_TIME");
    }


    public FavoriteZPCDao(DaoConfig config) {
        super(config);
    }
    
    public FavoriteZPCDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FAVORITE_ZPC\" (" + //
                "\"PHONE_NUMBER\" TEXT," + // 0: phoneNumber
                "\"ZALO_ID\" INTEGER NOT NULL ," + // 1: zaloId
                "\"CREATE_TIME\" INTEGER NOT NULL );"); // 2: createTime
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_FAVORITE_ZPC_PHONE_NUMBER_ZALO_ID ON FAVORITE_ZPC" +
                " (\"PHONE_NUMBER\",\"ZALO_ID\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FAVORITE_ZPC\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FavoriteZPC entity) {
        stmt.clearBindings();
 
        String phoneNumber = entity.phoneNumber;
        if (phoneNumber != null) {
            stmt.bindString(1, phoneNumber);
        }
        stmt.bindLong(2, entity.zaloId);
        stmt.bindLong(3, entity.createTime);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FavoriteZPC entity) {
        stmt.clearBindings();
 
        String phoneNumber = entity.phoneNumber;
        if (phoneNumber != null) {
            stmt.bindString(1, phoneNumber);
        }
        stmt.bindLong(2, entity.zaloId);
        stmt.bindLong(3, entity.createTime);
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public FavoriteZPC readEntity(Cursor cursor, int offset) {
        FavoriteZPC entity = new FavoriteZPC();
        readEntity(cursor, entity, offset);
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FavoriteZPC entity, int offset) {
        entity.phoneNumber = cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
        entity.zaloId = cursor.getLong(offset + 1);
        entity.createTime = cursor.getLong(offset + 2);
     }
    
    @Override
    protected final Void updateKeyAfterInsert(FavoriteZPC entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(FavoriteZPC entity) {
        return null;
    }

    @Override
    public boolean hasKey(FavoriteZPC entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

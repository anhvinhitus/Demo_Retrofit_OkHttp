package vn.com.vng.zalopay.data.cache.model;

import java.util.Map;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.AbstractDaoSession;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.identityscope.IdentityScopeType;
import org.greenrobot.greendao.internal.DaoConfig;

import vn.com.vng.zalopay.data.cache.model.AppResourceGD;
import vn.com.vng.zalopay.data.cache.model.TransactionLog;
import vn.com.vng.zalopay.data.cache.model.DataManifest;
import vn.com.vng.zalopay.data.cache.model.ZFL;
import vn.com.vng.zalopay.data.cache.model.ZPC;
import vn.com.vng.zalopay.data.cache.model.UCB;
import vn.com.vng.zalopay.data.cache.model.FavoriteZPC;
import vn.com.vng.zalopay.data.cache.model.TransferRecent;
import vn.com.vng.zalopay.data.cache.model.NotificationGD;
import vn.com.vng.zalopay.data.cache.model.ReceivePackageGD;
import vn.com.vng.zalopay.data.cache.model.MerchantUser;
import vn.com.vng.zalopay.data.cache.model.TransactionFragmentGD;

import vn.com.vng.zalopay.data.cache.model.AppResourceGDDao;
import vn.com.vng.zalopay.data.cache.model.TransactionLogDao;
import vn.com.vng.zalopay.data.cache.model.DataManifestDao;
import vn.com.vng.zalopay.data.cache.model.ZFLDao;
import vn.com.vng.zalopay.data.cache.model.ZPCDao;
import vn.com.vng.zalopay.data.cache.model.UCBDao;
import vn.com.vng.zalopay.data.cache.model.FavoriteZPCDao;
import vn.com.vng.zalopay.data.cache.model.TransferRecentDao;
import vn.com.vng.zalopay.data.cache.model.NotificationGDDao;
import vn.com.vng.zalopay.data.cache.model.ReceivePackageGDDao;
import vn.com.vng.zalopay.data.cache.model.MerchantUserDao;
import vn.com.vng.zalopay.data.cache.model.TransactionFragmentGDDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see org.greenrobot.greendao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig appResourceGDDaoConfig;
    private final DaoConfig transactionLogDaoConfig;
    private final DaoConfig dataManifestDaoConfig;
    private final DaoConfig zFLDaoConfig;
    private final DaoConfig zPCDaoConfig;
    private final DaoConfig uCBDaoConfig;
    private final DaoConfig favoriteZPCDaoConfig;
    private final DaoConfig transferRecentDaoConfig;
    private final DaoConfig notificationGDDaoConfig;
    private final DaoConfig receivePackageGDDaoConfig;
    private final DaoConfig merchantUserDaoConfig;
    private final DaoConfig transactionFragmentGDDaoConfig;

    private final AppResourceGDDao appResourceGDDao;
    private final TransactionLogDao transactionLogDao;
    private final DataManifestDao dataManifestDao;
    private final ZFLDao zFLDao;
    private final ZPCDao zPCDao;
    private final UCBDao uCBDao;
    private final FavoriteZPCDao favoriteZPCDao;
    private final TransferRecentDao transferRecentDao;
    private final NotificationGDDao notificationGDDao;
    private final ReceivePackageGDDao receivePackageGDDao;
    private final MerchantUserDao merchantUserDao;
    private final TransactionFragmentGDDao transactionFragmentGDDao;

    public DaoSession(Database db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        appResourceGDDaoConfig = daoConfigMap.get(AppResourceGDDao.class).clone();
        appResourceGDDaoConfig.initIdentityScope(type);

        transactionLogDaoConfig = daoConfigMap.get(TransactionLogDao.class).clone();
        transactionLogDaoConfig.initIdentityScope(type);

        dataManifestDaoConfig = daoConfigMap.get(DataManifestDao.class).clone();
        dataManifestDaoConfig.initIdentityScope(type);

        zFLDaoConfig = daoConfigMap.get(ZFLDao.class).clone();
        zFLDaoConfig.initIdentityScope(type);

        zPCDaoConfig = daoConfigMap.get(ZPCDao.class).clone();
        zPCDaoConfig.initIdentityScope(type);

        uCBDaoConfig = daoConfigMap.get(UCBDao.class).clone();
        uCBDaoConfig.initIdentityScope(type);

        favoriteZPCDaoConfig = daoConfigMap.get(FavoriteZPCDao.class).clone();
        favoriteZPCDaoConfig.initIdentityScope(type);

        transferRecentDaoConfig = daoConfigMap.get(TransferRecentDao.class).clone();
        transferRecentDaoConfig.initIdentityScope(type);

        notificationGDDaoConfig = daoConfigMap.get(NotificationGDDao.class).clone();
        notificationGDDaoConfig.initIdentityScope(type);

        receivePackageGDDaoConfig = daoConfigMap.get(ReceivePackageGDDao.class).clone();
        receivePackageGDDaoConfig.initIdentityScope(type);

        merchantUserDaoConfig = daoConfigMap.get(MerchantUserDao.class).clone();
        merchantUserDaoConfig.initIdentityScope(type);

        transactionFragmentGDDaoConfig = daoConfigMap.get(TransactionFragmentGDDao.class).clone();
        transactionFragmentGDDaoConfig.initIdentityScope(type);

        appResourceGDDao = new AppResourceGDDao(appResourceGDDaoConfig, this);
        transactionLogDao = new TransactionLogDao(transactionLogDaoConfig, this);
        dataManifestDao = new DataManifestDao(dataManifestDaoConfig, this);
        zFLDao = new ZFLDao(zFLDaoConfig, this);
        zPCDao = new ZPCDao(zPCDaoConfig, this);
        uCBDao = new UCBDao(uCBDaoConfig, this);
        favoriteZPCDao = new FavoriteZPCDao(favoriteZPCDaoConfig, this);
        transferRecentDao = new TransferRecentDao(transferRecentDaoConfig, this);
        notificationGDDao = new NotificationGDDao(notificationGDDaoConfig, this);
        receivePackageGDDao = new ReceivePackageGDDao(receivePackageGDDaoConfig, this);
        merchantUserDao = new MerchantUserDao(merchantUserDaoConfig, this);
        transactionFragmentGDDao = new TransactionFragmentGDDao(transactionFragmentGDDaoConfig, this);

        registerDao(AppResourceGD.class, appResourceGDDao);
        registerDao(TransactionLog.class, transactionLogDao);
        registerDao(DataManifest.class, dataManifestDao);
        registerDao(ZFL.class, zFLDao);
        registerDao(ZPC.class, zPCDao);
        registerDao(UCB.class, uCBDao);
        registerDao(FavoriteZPC.class, favoriteZPCDao);
        registerDao(TransferRecent.class, transferRecentDao);
        registerDao(NotificationGD.class, notificationGDDao);
        registerDao(ReceivePackageGD.class, receivePackageGDDao);
        registerDao(MerchantUser.class, merchantUserDao);
        registerDao(TransactionFragmentGD.class, transactionFragmentGDDao);
    }
    
    public void clear() {
        appResourceGDDaoConfig.clearIdentityScope();
        transactionLogDaoConfig.clearIdentityScope();
        dataManifestDaoConfig.clearIdentityScope();
        zFLDaoConfig.clearIdentityScope();
        zPCDaoConfig.clearIdentityScope();
        uCBDaoConfig.clearIdentityScope();
        favoriteZPCDaoConfig.clearIdentityScope();
        transferRecentDaoConfig.clearIdentityScope();
        notificationGDDaoConfig.clearIdentityScope();
        receivePackageGDDaoConfig.clearIdentityScope();
        merchantUserDaoConfig.clearIdentityScope();
        transactionFragmentGDDaoConfig.clearIdentityScope();
    }

    public AppResourceGDDao getAppResourceGDDao() {
        return appResourceGDDao;
    }

    public TransactionLogDao getTransactionLogDao() {
        return transactionLogDao;
    }

    public DataManifestDao getDataManifestDao() {
        return dataManifestDao;
    }

    public ZFLDao getZFLDao() {
        return zFLDao;
    }

    public ZPCDao getZPCDao() {
        return zPCDao;
    }

    public UCBDao getUCBDao() {
        return uCBDao;
    }

    public FavoriteZPCDao getFavoriteZPCDao() {
        return favoriteZPCDao;
    }

    public TransferRecentDao getTransferRecentDao() {
        return transferRecentDao;
    }

    public NotificationGDDao getNotificationGDDao() {
        return notificationGDDao;
    }

    public ReceivePackageGDDao getReceivePackageGDDao() {
        return receivePackageGDDao;
    }

    public MerchantUserDao getMerchantUserDao() {
        return merchantUserDao;
    }

    public TransactionFragmentGDDao getTransactionFragmentGDDao() {
        return transactionFragmentGDDao;
    }

}

package vn.com.vng.zalopay.data.cache.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TRANSACTION_FRAGMENT_GD".
*/
public class TransactionFragmentGDDao extends AbstractDao<TransactionFragmentGD, Long> {

    public static final String TABLENAME = "TRANSACTION_FRAGMENT_GD";

    /**
     * Properties of entity TransactionFragmentGD.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Statustype = new Property(0, long.class, "statustype", false, "STATUSTYPE");
        public final static Property Maxreqdate = new Property(1, long.class, "maxreqdate", false, "MAXREQDATE");
        public final static Property Minreqdate = new Property(2, long.class, "minreqdate", true, "MINREQDATE");
        public final static Property Outofdata = new Property(3, boolean.class, "outofdata", false, "OUTOFDATA");
    }


    public TransactionFragmentGDDao(DaoConfig config) {
        super(config);
    }
    
    public TransactionFragmentGDDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TRANSACTION_FRAGMENT_GD\" (" + //
                "\"STATUSTYPE\" INTEGER NOT NULL ," + // 0: statustype
                "\"MAXREQDATE\" INTEGER NOT NULL ," + // 1: maxreqdate
                "\"MINREQDATE\" INTEGER PRIMARY KEY NOT NULL ," + // 2: minreqdate
                "\"OUTOFDATA\" INTEGER NOT NULL );"); // 3: outofdata
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TRANSACTION_FRAGMENT_GD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TransactionFragmentGD entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.statustype);
        stmt.bindLong(2, entity.maxreqdate);
        stmt.bindLong(3, entity.minreqdate);
        stmt.bindLong(4, entity.outofdata ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TransactionFragmentGD entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.statustype);
        stmt.bindLong(2, entity.maxreqdate);
        stmt.bindLong(3, entity.minreqdate);
        stmt.bindLong(4, entity.outofdata ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 2);
    }    

    @Override
    public TransactionFragmentGD readEntity(Cursor cursor, int offset) {
        TransactionFragmentGD entity = new TransactionFragmentGD();
        readEntity(cursor, entity, offset);
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TransactionFragmentGD entity, int offset) {
        entity.statustype = cursor.getLong(offset + 0);
        entity.maxreqdate = cursor.getLong(offset + 1);
        entity.minreqdate = cursor.getLong(offset + 2);
        entity.outofdata = cursor.getShort(offset + 3) != 0;
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TransactionFragmentGD entity, long rowId) {
        entity.minreqdate = rowId;
        return rowId;
    }
    
    @Override
    public Long getKey(TransactionFragmentGD entity) {
        if(entity != null) {
            return entity.minreqdate;
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TransactionFragmentGD entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

package vn.com.vng.zalopay.data.cache.global;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table "APPTRANSID_LOG_TIMING_GD".
 */
public class ApptransidLogTimingGDDao extends AbstractDao<ApptransidLogTimingGD, Long> {

    public static final String TABLENAME = "APPTRANSID_LOG_TIMING_GD";

    /**
     * Properties of entity ApptransidLogTimingGD.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Apptransid = new Property(0, String.class, "apptransid", false, "APPTRANSID");
        public final static Property Step = new Property(1, Integer.class, "step", false, "STEP");
        public final static Property Timestamp = new Property(2, Long.class, "timestamp", true, "TIMESTAMP");
    }


    public ApptransidLogTimingGDDao(DaoConfig config) {
        super(config);
    }

    public ApptransidLogTimingGDDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"APPTRANSID_LOG_TIMING_GD\" (" + //
                "\"APPTRANSID\" TEXT," + // 0: apptransid
                "\"STEP\" INTEGER," + // 1: step
                "\"TIMESTAMP\" INTEGER PRIMARY KEY );"); // 2: timestamp
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"APPTRANSID_LOG_TIMING_GD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ApptransidLogTimingGD entity) {
        stmt.clearBindings();

        String apptransid = entity.apptransid;
        if (apptransid != null) {
            stmt.bindString(1, apptransid);
        }

        Integer step = entity.step;
        if (step != null) {
            stmt.bindLong(2, step);
        }

        Long timestamp = entity.timestamp;
        if (timestamp != null) {
            stmt.bindLong(3, timestamp);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ApptransidLogTimingGD entity) {
        stmt.clearBindings();

        String apptransid = entity.apptransid;
        if (apptransid != null) {
            stmt.bindString(1, apptransid);
        }

        Integer step = entity.step;
        if (step != null) {
            stmt.bindLong(2, step);
        }

        Long timestamp = entity.timestamp;
        if (timestamp != null) {
            stmt.bindLong(3, timestamp);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2);
    }

    @Override
    public ApptransidLogTimingGD readEntity(Cursor cursor, int offset) {
        ApptransidLogTimingGD entity = new ApptransidLogTimingGD();
        readEntity(cursor, entity, offset);
        return entity;
    }

    @Override
    public void readEntity(Cursor cursor, ApptransidLogTimingGD entity, int offset) {
        entity.apptransid = cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
        entity.step = cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1);
        entity.timestamp = cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2);
    }

    @Override
    protected final Long updateKeyAfterInsert(ApptransidLogTimingGD entity, long rowId) {
        entity.timestamp = rowId;
        return rowId;
    }

    @Override
    public Long getKey(ApptransidLogTimingGD entity) {
        if(entity != null) {
            return entity.timestamp;
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ApptransidLogTimingGD entity) {
        return entity.timestamp != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }

}
